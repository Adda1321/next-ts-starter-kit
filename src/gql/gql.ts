/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation UpdateAgendaConfiguration(\n    $bookshelfId: ID!\n    $configuration: UpdateAgendaConfigurationInput!\n  ) {\n    updateAgendaConfiguration(\n      bookshelfId: $bookshelfId\n      configuration: $configuration\n    ) {\n      id\n      showInvitees\n      showTitle\n      showDate\n      showTime\n      showLocation\n      showMeetingLink\n      showMeetingDetails\n      confidentialityFooter\n    }\n  }\n": typeof types.UpdateAgendaConfigurationDocument,
    "\n  query UserActions($companyId: ID!, $userId: ID!) {\n    userActions(companyId: $companyId, userId: $userId) {\n      id\n      actionItem\n      dueDate\n      status\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      bookshelfId\n      agendaId\n      agendaMinuteId\n      update\n      createdAt\n      updatedAt\n      meetingName\n      bookshelfName\n      bookcaseName\n      actionRef\n    }\n  }\n": typeof types.UserActionsDocument,
    "\n  query GetCarryOverActionItems($agendaId: ID!) {\n    getCarryOverActionItems(agendaId: $agendaId) {\n      id\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      agendaId\n      agendaMinuteId\n      createdAt\n      updatedAt\n      meetingName\n      bookshelfName\n      bookcaseName\n      actionRef\n    }\n  }\n": typeof types.GetCarryOverActionItemsDocument,
    "\n  query GetGuestActionItem($actionItemId: ID!, $email: String!) {\n    getGuestActionItem(actionItemId: $actionItemId, email: $email) {\n      id\n      actionItem\n      status\n      dueDate\n      organization\n      bookcase\n      bookshelf\n      meeting\n      meetingDate\n      update {\n        date\n        content\n      }\n      assignee {\n        name\n        email\n      }\n      forwardedBy {\n        name\n        email\n        date\n      }\n    }\n  }\n": typeof types.GetGuestActionItemDocument,
    "\n  query ActionItems($agendaMinuteId: ID!) {\n    actionItems(agendaMinuteId: $agendaMinuteId) {\n      id\n      agendaMinuteId\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      createdAt\n      updatedAt\n      actionRef\n      bookshelfName\n      bookcaseName\n    }\n  }\n": typeof types.ActionItemsDocument,
    "\n  query GetActionLogsForBookshelf($bookshelfId: ID!) {\n    getActionLogsForBookshelf(bookshelfId: $bookshelfId) {\n      meetingId\n      meetingName\n      meetingDate\n      actionItems\n    }\n  }\n": typeof types.GetActionLogsForBookshelfDocument,
    "\n  mutation AddCarryOverActionLog($bookshelfId: ID!, $agendaId: ID!) {\n    addCarryOverActionLog(bookshelfId: $bookshelfId, agendaId: $agendaId) {\n      success\n    }\n  }\n": typeof types.AddCarryOverActionLogDocument,
    "\n  mutation UpsertActionItem($id: ID, $input: UpsertActionItemInput!) {\n    upsertActionItem(id: $id, input: $input) {\n      id\n      agendaMinuteId\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpsertActionItemDocument,
    "\n  mutation UpdateGuestActionItem(\n    $id: ID!\n    $input: UpdateGuestActionItemInput!\n  ) {\n    updateGuestActionItem(id: $id, input: $input)\n  }\n": typeof types.UpdateGuestActionItemDocument,
    "\n  mutation DeleteActionItem($id: ID!) {\n    deleteActionItem(id: $id)\n  }\n": typeof types.DeleteActionItemDocument,
    "\n  mutation ForwardActionItem($input: ForwardActionItemInput!) {\n    forwardActionItem(input: $input) {\n      success\n    }\n  }\n": typeof types.ForwardActionItemDocument,
    "\n  mutation SendActionItems($input: SendActionItemsInput!) {\n    sendActionItems(input: $input) {\n      success\n      message\n      results {\n        total\n        sent\n        failed\n        errors\n      }\n    }\n  }\n": typeof types.SendActionItemsDocument,
    "\n  query Agendas($query: String!, $companyId: String!, $take: Int) {\n    agendas(query: $query, companyId: $companyId, take: $take) {\n      id\n      createdAt\n      updatedAt\n      index\n      name\n      shortname\n      agendaMinute {\n        id\n        signatures {\n          signed\n          user {\n            firstName\n            lastName\n          }\n        }\n        minutesAmendments {\n          reviewer {\n            firstName\n            lastName\n          }\n          reviews {\n            id\n            status\n            comment\n            minutesAmendment {\n              reviewer {\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.AgendasDocument,
    "\n  query AgendasWithPermissions(\n    $query: String!\n    $companyId: String!\n    $take: Int\n  ) {\n    agendasWithPermissions(query: $query, companyId: $companyId, take: $take) {\n      id\n      createdAt\n      updatedAt\n      index\n      meetingDate\n      startTime\n      location\n      name\n      shortname\n      logo\n      color\n      bookshelf {\n        id\n        name\n        bookcase {\n          id\n          name\n        }\n      }\n      agendaMinute {\n        id\n        minutes\n        signatures {\n          signed\n          user {\n            firstName\n            lastName\n          }\n          signatureUploadFile {\n            uploadedFileId\n            baseUrl\n            createdAt\n          }\n        }\n        minutesAmendments {\n          reviewer {\n            firstName\n            lastName\n          }\n          reviews {\n            id\n            status\n            comment\n            minutesAmendment {\n              reviewer {\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.AgendasWithPermissionsDocument,
    "\n  query Agenda($agendaId: ID!) {\n    agenda(id: $agendaId) {\n      id\n      name\n      shortname\n      startTime\n      location\n      meetingDate\n      meetingLink\n      details\n      published\n      minutesTemplateVersion\n      index\n      color\n      logo\n      companyName\n      bookshelf {\n        id\n        name\n        showClientCompanyBranding\n        bookcase {\n          id\n          name\n        }\n      }\n      items {\n        id\n        name\n        owner\n        type\n        duration\n        parentAgendaItemId\n        index\n        files {\n          pageCount\n        }\n        childAgendaItems {\n          id\n          name\n          owner\n          type\n          duration\n          parentAgendaItemId\n          index\n          files {\n            pageCount\n          }\n          childAgendaItems {\n            id\n            name\n            owner\n            type\n            duration\n            parentAgendaItemId\n            index\n            files {\n              pageCount\n            }\n            childAgendaItems {\n              id\n              name\n              owner\n              type\n              duration\n              parentAgendaItemId\n              index\n              files {\n                pageCount\n              }\n              childAgendaItems {\n                id\n                name\n                owner\n                type\n                duration\n                parentAgendaItemId\n                index\n                files {\n                  pageCount\n                }\n              }\n            }\n          }\n        }\n      }\n      agendaPublishFile {\n        url\n      }\n      agendaMinute {\n        updatedAt\n        signatures {\n          signed\n        }\n        minutesAmendments {\n          id\n          reviewer {\n            firstName\n            lastName\n            id\n          }\n          reviews {\n            comment\n            id\n            status\n          }\n        }\n        minutesAmendmentNotes\n        minutes\n        previousMinutes\n        id\n        meetingLanguage\n        minutesLanguage\n      }\n      meetingMinuteTranscription {\n        transcription\n        id\n      }\n      highlights {\n        content\n        id\n        position\n        userId\n        comment\n        isPublic\n      }\n    }\n  }\n": typeof types.AgendaDocument,
    "\n  query MinuteSignatures($agendaMinuteId: ID!) {\n    minuteSignatures(agendaMinuteId: $agendaMinuteId) {\n      signatoryId\n      signed\n      user {\n        firstName\n        lastName\n      }\n      signatureUploadFile {\n        uploadedFileId\n        baseUrl\n        createdAt\n      }\n    }\n  }\n": typeof types.MinuteSignaturesDocument,
    "\n  query CompanyUsers($companyId: ID!) {\n    companyUsers(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      lastSignedIn\n      roles {\n        permissions {\n          name\n        }\n      }\n      companies {\n        accountStatus\n      }\n    }\n  }\n": typeof types.CompanyUsersDocument,
    "\n  mutation DeleteMinutesAndTranscript($agendaId: ID!) {\n    deleteMinutesAndTranscript(agendaId: $agendaId)\n  }\n": typeof types.DeleteMinutesAndTranscriptDocument,
    "\n  mutation AddReviewToMinutesAmendment(\n    $minutesAmendmentId: ID!\n    $comment: String!\n  ) {\n    addReviewToMinutesAmendment(\n      minutesAmendmentId: $minutesAmendmentId\n      comment: $comment\n    ) {\n      reviews {\n        comment\n      }\n    }\n  }\n": typeof types.AddReviewToMinutesAmendmentDocument,
    "\n  mutation UpdateLastSignIn($companyId: ID!) {\n    updateLastSignIn(companyId: $companyId)\n  }\n": typeof types.UpdateLastSignInDocument,
    "\n  mutation ResolveMinutesAmendment($minutesAmendmentReviewId: ID!) {\n    resolveMinutesAmendment(\n      minutesAmendmentReviewId: $minutesAmendmentReviewId\n    ) {\n      id\n      status\n    }\n  }\n": typeof types.ResolveMinutesAmendmentDocument,
    "\n  mutation AddSignatureToMinutes(\n    $agendaMinuteId: ID!\n    $signatureFile: UploadFileInput!\n    $signedAt: DateTime\n  ) {\n    addSignatureToMinutes(\n      agendaMinuteId: $agendaMinuteId\n      signatureFile: $signatureFile\n      signedAt: $signedAt\n    ) {\n      message\n      signature {\n        url\n      }\n    }\n  }\n": typeof types.AddSignatureToMinutesDocument,
    "\n  query GetCompanyUsers($companyId: ID!) {\n    companyUsers(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n": typeof types.GetCompanyUsersDocument,
    "\n  query GetAuthorizedCompanyUsers(\n    $companyId: ID!\n    $query: String\n    $skip: Int\n    $take: Int\n  ) {\n    authorizedCompanyUsers(\n      companyId: $companyId\n      query: $query\n      skip: $skip\n      take: $take\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n": typeof types.GetAuthorizedCompanyUsersDocument,
    "\n  query Me($companyId: ID) {\n    me(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      companies {\n        company {\n          id\n          name\n        }\n        provider\n        isActive\n        accountStatus\n      }\n      roles {\n        key\n        name\n      }\n    }\n  }\n": typeof types.MeDocument,
    "\n  query CompanyUserResourcePermissions($userId: ID!, $companyId: ID!) {\n    companyUserResourcePermissions(userId: $userId, companyId: $companyId) {\n      resourceType\n      resourceId\n      includedPermissionIds\n    }\n  }\n": typeof types.CompanyUserResourcePermissionsDocument,
    "\n  query AgendaMinuteByAgendaId($agendaId: ID!) {\n    agendaMinuteByAgendaId(agendaId: $agendaId) {\n      minutes\n      previousMinutes\n      id\n      meetingLanguage\n      minutesLanguage\n      updatedAt\n    }\n  }\n": typeof types.AgendaMinuteByAgendaIdDocument,
    "\n  query AgendaAttendee($agendaId: ID!) {\n    agendaAttendee(agendaId: $agendaId) {\n      agendaId\n      attendeeId\n      createdByUserId\n      updatedAt\n      createdAt\n      updatedByUserId\n      status\n      user {\n        firstName\n        lastName\n        id\n        email\n      }\n    }\n  }\n": typeof types.AgendaAttendeeDocument,
    "\n  query IsUserAttendee($agendaId: String!) {\n    isUserAttendee(agendaId: $agendaId) {\n      message\n      success\n    }\n  }\n": typeof types.IsUserAttendeeDocument,
    "\n  query AgendaItemUploadedFiles($agendaItemId: ID!) {\n    agendaItemUploadedFiles(agendaItemId: $agendaItemId) {\n      id\n      name\n      extension\n      url\n    }\n  }\n": typeof types.AgendaItemUploadedFilesDocument,
    "\n  query AgendaItemRequestedFiles($agendaItemId: ID!) {\n    agendaItemRequestedFiles(agendaItemId: $agendaItemId) {\n      agendaItemId\n      uploader {\n        firstName\n      }\n      uploadedFile {\n        name\n      }\n      uploadedFileId\n    }\n  }\n": typeof types.AgendaItemRequestedFilesDocument,
    "\n  mutation UpdateAgenda($updateAgendaId: ID!, $data: UpdateAgendaInput!) {\n    updateAgenda(id: $updateAgendaId, data: $data) {\n      id\n      name\n      shortname\n      location\n      meetingDate\n      startTime\n      meetingLink\n      details\n      index\n      items {\n        id\n        name\n        owner\n        duration\n        type\n        agendaId\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateAgendaDocument,
    "\n  mutation AddHighlight(\n    $agendaId: ID!\n    $position: String!\n    $content: String!\n    $comment: String\n    $isPublic: Boolean\n  ) {\n    addHighlight(\n      agendaId: $agendaId\n      position: $position\n      content: $content\n      comment: $comment\n      isPublic: $isPublic\n    ) {\n      id\n      content\n      position\n      comment\n      userId\n      isPublic\n    }\n  }\n": typeof types.AddHighlightDocument,
    "\n  mutation RemoveAllHighlights($agendaId: ID!) {\n    removeAllHighlights(agendaId: $agendaId) {\n      id\n    }\n  }\n": typeof types.RemoveAllHighlightsDocument,
    "\n  mutation RemoveHighlight($removeHighlightId: ID!) {\n    removeHighlight(id: $removeHighlightId) {\n      id\n    }\n  }\n": typeof types.RemoveHighlightDocument,
    "\n  mutation UpdateHighlight(\n    $updateHighlightId: ID!\n    $content: JSON\n    $position: JSON\n    $comment: JSON\n    $isPublic: Boolean\n  ) {\n    updateHighlight(\n      id: $updateHighlightId\n      content: $content\n      position: $position\n      comment: $comment\n      isPublic: $isPublic\n    ) {\n      id\n      isPublic\n    }\n  }\n": typeof types.UpdateHighlightDocument,
    "\n  mutation UpdateHighlightVisibility($highlightId: ID!, $isPublic: Boolean!) {\n    updateHighlightVisibility(highlightId: $highlightId, isPublic: $isPublic) {\n      id\n      isPublic\n    }\n  }\n": typeof types.UpdateHighlightVisibilityDocument,
    "\n  mutation DownloadMinutesAsWord($file: UploadFileInput!) {\n    downloadMinutesAsWord(file: $file)\n  }\n": typeof types.DownloadMinutesAsWordDocument,
    "\n  mutation AddAgenda($bookshelfId: ID!, $data: AddAgendaInput!) {\n    addAgenda(bookshelfId: $bookshelfId, data: $data) {\n      id\n      name\n      shortname\n      startTime\n      location\n      meetingDate\n      meetingLink\n      details\n      published\n      index\n      bookshelf {\n        id\n        name\n        showClientCompanyBranding\n        bookcase {\n          id\n          name\n        }\n      }\n      items {\n        id\n        name\n        owner\n        type\n        duration\n        parentAgendaItemId\n        index\n        files {\n          pageCount\n        }\n        childAgendaItems {\n          id\n          name\n          owner\n          type\n          duration\n          parentAgendaItemId\n          index\n          files {\n            pageCount\n          }\n        }\n      }\n      agendaPublishFile {\n        url\n      }\n      agendaMinute {\n        signatures {\n          signed\n        }\n        minutesAmendments {\n          id\n          reviewer {\n            firstName\n            lastName\n            id\n          }\n          reviews {\n            comment\n            id\n            status\n          }\n        }\n        minutesAmendmentNotes\n        minutes\n        previousMinutes\n        id\n      }\n      meetingMinuteTranscription {\n        transcription\n        id\n      }\n    }\n  }\n": typeof types.AddAgendaDocument,
    "\n  mutation DeactivateCompanyUser($companyId: ID!, $userId: ID!) {\n    deactivateCompanyUser(companyId: $companyId, userId: $userId)\n  }\n": typeof types.DeactivateCompanyUserDocument,
    "\n  mutation PublishAgenda(\n    $companyId: ID!\n    $agendaId: String!\n    $attendeesId: [ID!]!\n    $guestIds: [ID!]\n    $sendNotification: Boolean!\n    $file: UploadFileInput!\n    $meetingDetails: AgendaEmailTemplateInput\n    $logoType: LogoType!\n    $noticeType: String!\n  ) {\n    publishAgenda(\n      companyId: $companyId\n      agendaId: $agendaId\n      attendeesId: $attendeesId\n      guestIds: $guestIds\n      sendNotification: $sendNotification\n      file: $file\n      meetingDetails: $meetingDetails\n      logoType: $logoType\n      noticeType: $noticeType\n    ) {\n      message\n    }\n  }\n": typeof types.PublishAgendaDocument,
    "\n  mutation AddBookcase($companyId: ID!, $data: AddBookcaseInput!) {\n    addBookcase(companyId: $companyId, data: $data) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.AddBookcaseDocument,
    "\n  mutation UpsertCompanyUserShelfPermission(\n    $resourceId: ID!\n    $companyId: ID!\n    $shelfPermissions: [ShelfPermissionInput!]\n  ) {\n    upsertCompanyUserShelfPermission(\n      resourceId: $resourceId\n      companyId: $companyId\n      shelfPermissions: $shelfPermissions\n    )\n  }\n": typeof types.UpsertCompanyUserShelfPermissionDocument,
    "\n  mutation UpsertCompanyUserResourcePermission(\n    $userId: ID!\n    $companyId: ID!\n    $assignedRoles: [ID!]\n    $removedRoles: [ID!]\n    $resourcePermissions: [ResourcePermissionInput!]\n  ) {\n    upsertCompanyUserResourcePermission(\n      userId: $userId\n      assignedRoles: $assignedRoles\n      removedRoles: $removedRoles\n      companyId: $companyId\n      resourcePermissions: $resourcePermissions\n    )\n  }\n": typeof types.UpsertCompanyUserResourcePermissionDocument,
    "\n  query AgendaItemsByAgendaId($agendaId: ID!) {\n    agendaItemsByAgendaId(agendaId: $agendaId) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      updatedAt\n    }\n  }\n": typeof types.AgendaItemsByAgendaIdDocument,
    "\n  query Bookcases($companyId: ID!, $take: Int) {\n    bookcases(companyId: $companyId, take: $take) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        color\n        logo\n        showClientCompanyBranding\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.BookcasesDocument,
    "\n  mutation DeleteBookcase($deleteBookcaseId: ID!) {\n    deleteBookcase(id: $deleteBookcaseId)\n  }\n": typeof types.DeleteBookcaseDocument,
    "\n  mutation UpdateBookcase($updateBookcaseId: ID!, $name: String!) {\n    updateBookcase(id: $updateBookcaseId, name: $name) {\n      id\n      name\n      description\n    }\n  }\n": typeof types.UpdateBookcaseDocument,
    "\n  mutation AddBookshelf($bookcaseId: ID!, $data: AddBookshelfInput!) {\n    addBookshelf(bookcaseId: $bookcaseId, data: $data) {\n      id\n      name\n      description\n      agendas {\n        id\n        createdAt\n        updatedAt\n        meetingDate\n        index\n        name\n        shortname\n        published\n        agendaMinute {\n          id\n          signatures {\n            signed\n          }\n        }\n      }\n    }\n  }\n": typeof types.AddBookshelfDocument,
    "\n  mutation DeleteBookshelf($deleteBookshelfId: ID!) {\n    deleteBookshelf(id: $deleteBookshelfId)\n  }\n": typeof types.DeleteBookshelfDocument,
    "\n  mutation RemoveBookshelfLogo($removeBookshelfLogoId: ID!) {\n    removeBookshelfLogo(id: $removeBookshelfLogoId) {\n      logo\n    }\n  }\n": typeof types.RemoveBookshelfLogoDocument,
    "\n  mutation UpdateBookshelf(\n    $updateBookshelfId: ID!\n    $data: UpdateBookshelfInput!\n  ) {\n    updateBookshelf(id: $updateBookshelfId, data: $data) {\n      id\n      name\n      color\n      description\n    }\n  }\n": typeof types.UpdateBookshelfDocument,
    "\n  mutation CreateOrUpdateAgendaMinute($data: CreateOrUpdateAgendaMinuteInput!) {\n    createOrUpdateAgendaMinute(data: $data) {\n      id\n      minutes\n      agendaId\n      createdByUserId\n      createdAt\n      updatedAt\n      updatedByUserId\n      staleData\n    }\n  }\n": typeof types.CreateOrUpdateAgendaMinuteDocument,
    "\n  mutation UpdateOriginalMinutes($data: CreateOrUpdateAgendaMinuteInput!) {\n    updateOriginalMinutes(data: $data) {\n      id\n      minutes\n      agendaId\n      createdByUserId\n      createdAt\n      updatedAt\n      updatedByUserId\n    }\n  }\n": typeof types.UpdateOriginalMinutesDocument,
    "\n  mutation GenerateMinutesFromCustomPrompt($agendaId: ID!, $prompt: String!) {\n    generateMinutesFromCustomPrompt(agendaId: $agendaId, prompt: $prompt)\n  }\n": typeof types.GenerateMinutesFromCustomPromptDocument,
    "\n  mutation RequestSignatureForMinutes(\n    $agendaMinuteId: ID!\n    $signatories: [String!]!\n    $signatureRequestNotes: String\n    $sendNotification: Boolean!\n  ) {\n    requestSignatureForMinutes(\n      agendaMinuteId: $agendaMinuteId\n      signatories: $signatories\n      signatureRequestNotes: $signatureRequestNotes\n      sendNotification: $sendNotification\n    ) {\n      message\n    }\n  }\n": typeof types.RequestSignatureForMinutesDocument,
    "\n  mutation AddReviewersToMinutes(\n    $agendaMinuteId: ID!\n    $minutesAmendmentNotes: String!\n    $reviewerIds: [ID!]!\n  ) {\n    addReviewersToMinutes(\n      data: {\n        agendaMinuteId: $agendaMinuteId\n        minutesAmendmentNotes: $minutesAmendmentNotes\n        reviewerIds: $reviewerIds\n      }\n    ) {\n      minutesAmendments {\n        reviewerId\n      }\n    }\n  }\n": typeof types.AddReviewersToMinutesDocument,
    "\n  mutation AddUser(\n    $companyId: ID!\n    $user: AddUserInput!\n    $isSaveAndExit: Boolean\n  ) {\n    addUser(companyId: $companyId, user: $user, isSaveAndExit: $isSaveAndExit) {\n      id\n      lastSignedIn\n      email\n      firstName\n      lastName\n      telephone\n    }\n  }\n": typeof types.AddUserDocument,
    "\n  mutation AddUsers($companyId: ID!, $users: [AddUserInput!]!) {\n    addUsers(companyId: $companyId, users: $users) {\n      createdUsers {\n        id\n        email\n        firstName\n        lastName\n        lastSignedIn\n        telephone\n      }\n    }\n  }\n": typeof types.AddUsersDocument,
    "\n  mutation UpdateUser($companyId: ID!, $userId: ID!, $user: AddUserInput!) {\n    updateUser(companyId: $companyId, userId: $userId, user: $user) {\n      id\n      email\n      firstName\n      lastName\n      provider\n      telephone\n      lastSignedIn\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  mutation GenerateResetToken($email: String!) {\n    generateResetToken(email: $email)\n  }\n": typeof types.GenerateResetTokenDocument,
    "\n  mutation ChangePassword(\n    $userId: ID!\n    $currentPassword: String!\n    $newPassword: String!\n  ) {\n    changePassword(\n      userId: $userId\n      currentPassword: $currentPassword\n      newPassword: $newPassword\n    )\n  }\n": typeof types.ChangePasswordDocument,
    "\n  mutation CreateUserPassword(\n    $companyId: ID!\n    $resetToken: String!\n    $newPassword: String!\n  ) {\n    createUserPassword(\n      companyId: $companyId\n      resetToken: $resetToken\n      newPassword: $newPassword\n    )\n  }\n": typeof types.CreateUserPasswordDocument,
    "\n  mutation ResetUserPassword($resetToken: String!, $newPassword: String!) {\n    resetUserPassword(resetToken: $resetToken, newPassword: $newPassword)\n  }\n": typeof types.ResetUserPasswordDocument,
    "\n  mutation UploadAgendaItemFile(\n    $agendaItemId: ID!\n    $files: [UploadFileInput!]!\n  ) {\n    uploadAgendaItemFile(agendaItemId: $agendaItemId, files: $files) {\n      id\n      name\n      extension\n      url\n    }\n  }\n": typeof types.UploadAgendaItemFileDocument,
    "\n  mutation UploadAgendaItemRequestedFile(\n    $agendaItemId: ID!\n    $agendaItemFileRequestId: ID!\n    $files: [UploadFileInput!]!\n  ) {\n    uploadAgendaItemRequestedFile(\n      agendaItemId: $agendaItemId\n      agendaItemFileRequestId: $agendaItemFileRequestId\n      files: $files\n    ) {\n      id\n      name\n      extension\n      url\n    }\n  }\n": typeof types.UploadAgendaItemRequestedFileDocument,
    "\n  mutation RequestAgendaItemFile(\n    $companyId: ID!\n    $agendaItemId: ID!\n    $requesteeIds: [ID!]!\n    $deadline: DateTime\n    $message: String\n  ) {\n    requestAgendaItemFile(\n      companyId: $companyId\n      agendaItemId: $agendaItemId\n      requesteeIds: $requesteeIds\n      deadline: $deadline\n      message: $message\n    )\n  }\n": typeof types.RequestAgendaItemFileDocument,
    "\n  mutation DeleteAgenda($agendaId: ID!, $companyId: ID!) {\n    deleteAgenda(agendaId: $agendaId, companyId: $companyId)\n  }\n": typeof types.DeleteAgendaDocument,
    "\n  mutation ArchiveAgenda($agendaId: ID!) {\n    archiveAgenda(agendaId: $agendaId) {\n      id\n      name\n      shortname\n      location\n      meetingDate\n      startTime\n      meetingLink\n      details\n      index\n      createdAt\n      updatedAt\n      published\n      deleted\n    }\n  }\n": typeof types.ArchiveAgendaDocument,
    "\n  mutation CloneAgenda($bookshelfId: ID!, $agendaId: ID!) {\n    cloneAgenda(bookshelfId: $bookshelfId, agendaId: $agendaId) {\n      id\n    }\n  }\n": typeof types.CloneAgendaDocument,
    "\n  mutation ActivateCompanyUser($companyId: ID!, $userId: ID!) {\n    activateCompanyUser(companyId: $companyId, userId: $userId)\n  }\n": typeof types.ActivateCompanyUserDocument,
    "\n  mutation DeleteAgendaItemFile($agendaItemId: ID!, $fileId: ID!) {\n    deleteAgendaItemFile(agendaItemId: $agendaItemId, fileId: $fileId)\n  }\n": typeof types.DeleteAgendaItemFileDocument,
    "\n  mutation AddCompanyWithUser(\n    $companyId: ID!\n    $companyInput: AddCompanyInput!\n    $userInput: AddUserInput!\n  ) {\n    addCompanyWithUser(\n      companyId: $companyId\n      companyInput: $companyInput\n      userInput: $userInput\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n    }\n  }\n": typeof types.AddCompanyWithUserDocument,
    "\n  query Companies {\n    companies {\n      id\n      name\n    }\n  }\n": typeof types.CompaniesDocument,
    "\n  mutation ReInviteUser(\n    $email: String!\n    $companyId: ID!\n    $isSystemAdmin: Boolean\n  ) {\n    reInviteUser(\n      email: $email\n      companyId: $companyId\n      isSystemAdmin: $isSystemAdmin\n    )\n  }\n": typeof types.ReInviteUserDocument,
    "\n  mutation DeleteCompanyUser($companyId: ID!, $userId: ID!) {\n    deleteCompanyUser(companyId: $companyId, userId: $userId)\n  }\n": typeof types.DeleteCompanyUserDocument,
    "\n  query AuthorizedBookcasesByRole($companyId: ID!, $take: Int) {\n    authorizedBookcasesByRole(companyId: $companyId, take: $take) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.AuthorizedBookcasesByRoleDocument,
    "\n  mutation AddMinutesTemplateVersion(\n    $agendaId: ID!\n    $templateVersion: MinutesTemplateVersion!\n  ) {\n    addMinutesTemplateVersion(\n      agendaId: $agendaId\n      templateVersion: $templateVersion\n    ) {\n      id\n      minutesTemplateVersion\n    }\n  }\n": typeof types.AddMinutesTemplateVersionDocument,
    "\n  query GetAgendaConfiguration($bookshelfId: ID!) {\n    getAgendaConfiguration(bookshelfId: $bookshelfId) {\n      showInvitees\n      showTitle\n      showDate\n      showTime\n      showLocation\n      showMeetingLink\n      showMeetingDetails\n      confidentialityFooter\n    }\n  }\n": typeof types.GetAgendaConfigurationDocument,
    "\n  mutation AddAgendaItemsToAgenda(\n    $agendaId: ID!\n    $data: [AddAgendaItemInput!]!\n  ) {\n    addAgendaItemsToAgenda(agendaId: $agendaId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.AddAgendaItemsToAgendaDocument,
    "\n  mutation Mutation($agendaItemId: ID!, $data: AddAgendaItemInput!) {\n    addAgendaItemToAgendaItem(agendaItemId: $agendaItemId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.MutationDocument,
    "\n  mutation UpdateAgendaItem(\n    $updateAgendaItemId: ID!\n    $data: UpdateAgendaItemInput!\n  ) {\n    updateAgendaItem(id: $updateAgendaItemId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateAgendaItemDocument,
    "\n  mutation DeleteAgendaItem($deleteAgendaItemId: ID!) {\n    deleteAgendaItem(id: $deleteAgendaItemId)\n  }\n": typeof types.DeleteAgendaItemDocument,
    "\n  mutation DeleteTranscript($agendaId: ID!) {\n    deleteTranscript(agendaId: $agendaId)\n  }\n": typeof types.DeleteTranscriptDocument,
    "\n  query GetAzureAdConfig($companyId: ID!) {\n    getAzureAdConfig(companyId: $companyId) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": typeof types.GetAzureAdConfigDocument,
    "\n  mutation CreateAzureAdConfig($data: CreateAzureAdConfigInput!) {\n    createAzureAdConfig(data: $data) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": typeof types.CreateAzureAdConfigDocument,
    "\n  mutation UpdateAzureAdConfig($data: UpdateAzureAdConfigInput!) {\n    updateAzureAdConfig(data: $data) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": typeof types.UpdateAzureAdConfigDocument,
    "\n  mutation UpdateCompany($updateCompanyId: ID!, $data: UpdateCompanyInput!) {\n    updateCompany(id: $updateCompanyId, data: $data) {\n      id\n      logo\n      name\n      state\n      website\n      zip\n      address1\n      address2\n      city\n      color\n      updatedAt\n    }\n  }\n": typeof types.UpdateCompanyDocument,
    "\n  query Company($companyId: ID!) {\n    company(id: $companyId) {\n      id\n      logo\n      name\n      state\n      website\n      zip\n      address1\n      address2\n      city\n      color\n      countryCode\n      updatedAt\n    }\n  }\n": typeof types.CompanyDocument,
    "\n  mutation RemoveCompanyLogo($removeCompanyLogoId: ID!) {\n    removeCompanyLogo(id: $removeCompanyLogoId) {\n      logo\n    }\n  }\n": typeof types.RemoveCompanyLogoDocument,
    "\n  query CompanyStatistics {\n    companyStatistics {\n      id\n      name\n      totalBookshelves\n      totalBookcases\n      totalAgendas\n      totalMinutes\n      lastLoginTime\n      lastLoginUser {\n        id\n        firstName\n        lastName\n        email\n      }\n      activeUsers\n    }\n  }\n": typeof types.CompanyStatisticsDocument,
    "\n  mutation DeleteCompany($id: ID!) {\n    deleteCompany(id: $id)\n  }\n": typeof types.DeleteCompanyDocument,
    "\n  mutation UpsertEmailNoticeTemplate($input: UpsertEmailNoticeTemplateInput!) {\n    upsertEmailNoticeTemplate(input: $input) {\n      id\n      subject\n      body\n      companyId\n      shelfId\n      type\n      variables\n      useShelfNotice\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpsertEmailNoticeTemplateDocument,
    "\n  query GetEmailNoticeTemplate(\n    $companyId: ID!\n    $type: TemplateType!\n    $shelfId: ID\n  ) {\n    getEmailNoticeTemplate(\n      companyId: $companyId\n      type: $type\n      shelfId: $shelfId\n    ) {\n      id\n      subject\n      body\n      companyId\n      shelfId\n      type\n      variables\n      useShelfNotice\n    }\n  }\n": typeof types.GetEmailNoticeTemplateDocument,
    "\n  mutation SendPreviewEmail($input: SendPreviewEmailInput!) {\n    sendPreviewEmail(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.SendPreviewEmailDocument,
    "\n  query Groups($companyId: ID!) {\n    groups(companyId: $companyId) {\n      id\n      name\n      description\n      type\n      isActive\n      isSuperGroup\n      companyId\n      creator {\n        id\n        firstName\n        lastName\n        email\n      }\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": typeof types.GroupsDocument,
    "\n  query UserGroups($companyId: ID!) {\n    userGroups(companyId: $companyId) {\n      id\n      name\n    }\n  }\n": typeof types.UserGroupsDocument,
    "\n  mutation CreateGroup(\n    $name: String!\n    $type: String!\n    $description: String!\n    $companyId: ID!\n    $managerIds: [ID!]!\n    $userIds: [ID!]!\n    $isSuperGroup: Boolean!\n    $autoAddCurrentUserAsAdmin: Boolean\n  ) {\n    createGroup(\n      input: {\n        name: $name\n        type: $type\n        description: $description\n        companyId: $companyId\n        managerIds: $managerIds\n        userIds: $userIds\n        isSuperGroup: $isSuperGroup\n        autoAddCurrentUserAsAdmin: $autoAddCurrentUserAsAdmin\n      }\n    ) {\n      id\n      name\n      type\n      description\n      isActive\n      isSuperGroup\n      companyId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": typeof types.CreateGroupDocument,
    "\n  mutation UpdateGroup(\n    $id: ID!\n    $name: String!\n    $type: String!\n    $description: String!\n    $managerIds: [ID!]!\n    $userIds: [ID!]!\n    $isSuperGroup: Boolean!\n    $autoAddCurrentUserAsAdmin: Boolean\n  ) {\n    updateGroup(\n      id: $id\n      input: {\n        name: $name\n        type: $type\n        description: $description\n        managerIds: $managerIds\n        userIds: $userIds\n        isSuperGroup: $isSuperGroup\n        autoAddCurrentUserAsAdmin: $autoAddCurrentUserAsAdmin\n      }\n    ) {\n      id\n      name\n      type\n      description\n      isActive\n      isSuperGroup\n      companyId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": typeof types.UpdateGroupDocument,
    "\n  mutation DeleteGroup($id: ID!) {\n    deleteGroup(id: $id) {\n      id\n    }\n  }\n": typeof types.DeleteGroupDocument,
    "\n  mutation UpsertGroupResourcePermissions(\n    $groupId: ID!\n    $resourcePermissions: [ResourcePermissionInput!]!\n  ) {\n    upsertGroupResourcePermissions(\n      groupId: $groupId\n      resourcePermissions: $resourcePermissions\n    ) {\n      id\n      name\n      description\n      type\n      isActive\n      isSuperGroup\n      companyId\n      createdAt\n      createdByUserId\n      updatedAt\n      updatedByUserId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": typeof types.UpsertGroupResourcePermissionsDocument,
    "\n  query GroupResourcePermissions($groupId: ID!) {\n    groupResourcePermissions(groupId: $groupId) {\n      resourceId\n      resourceType\n    }\n  }\n": typeof types.GroupResourcePermissionsDocument,
    "\n  query UsersInManagedGroups(\n    $companyId: ID!\n    $query: String\n    $skip: Int\n    $take: Int\n  ) {\n    usersInManagedGroups(\n      companyId: $companyId\n      query: $query\n      skip: $skip\n      take: $take\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n": typeof types.UsersInManagedGroupsDocument,
    "\n  query GroupBookcases(\n    $companyId: ID!\n    $groupId: ID!\n    $search: String\n    $orderBy: [OrderByClause!]\n    $skip: Int\n    $take: Int\n  ) {\n    groupBookcases(\n      companyId: $companyId\n      groupId: $groupId\n      search: $search\n      orderBy: $orderBy\n      skip: $skip\n      take: $take\n    ) {\n      id\n      name\n      bookshelves {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GroupBookcasesDocument,
    "\n  query GetOktaConfig($companyId: ID!) {\n    getOktaConfig(companyId: $companyId) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n      createdAt\n      updatedAt\n      company {\n        name\n      }\n    }\n  }\n": typeof types.GetOktaConfigDocument,
    "\n  mutation CreateOktaConfig($data: CreateOktaConfigInput!) {\n    createOktaConfig(data: $data) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n    }\n  }\n": typeof types.CreateOktaConfigDocument,
    "\n  mutation UpdateOktaConfig($data: UpdateOktaConfigInput!) {\n    updateOktaConfig(data: $data) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n    }\n  }\n": typeof types.UpdateOktaConfigDocument,
    "\n  mutation DeleteOktaConfig($companyId: ID!) {\n    deleteOktaConfig(companyId: $companyId)\n  }\n": typeof types.DeleteOktaConfigDocument,
    "\n  query GetOktaOidcConfig($companyId: ID!) {\n    getOktaOidcConfig(companyId: $companyId) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": typeof types.GetOktaOidcConfigDocument,
    "\n  mutation CreateOktaOidcConfig($data: CreateOktaOidcConfigInput!) {\n    createOktaOidcConfig(data: $data) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateOktaOidcConfigDocument,
    "\n  mutation UpdateOktaOidcConfig($data: UpdateOktaOidcConfigInput!) {\n    updateOktaOidcConfig(data: $data) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": typeof types.UpdateOktaOidcConfigDocument,
    "\n  mutation DeleteOktaOidcConfig($companyId: ID!) {\n    deleteOktaOidcConfig(companyId: $companyId)\n  }\n": typeof types.DeleteOktaOidcConfigDocument,
    "\n  query Roles {\n    roles {\n      id\n      name\n      description\n      key\n    }\n  }\n": typeof types.RolesDocument,
    "\n  query GetUsersWithShelfPermissions(\n    $companyId: ID!\n    $shelfId: ID!\n    $getAllUsers: Boolean\n  ) {\n    usersByCompany(\n      companyId: $companyId\n      shelfId: $shelfId\n      getAllUsers: $getAllUsers\n    ) {\n      user {\n        id\n        firstName\n        lastName\n        email\n        roles {\n          role {\n            id\n            name\n            key\n          }\n        }\n        CompanyUserResourcePermission {\n          permissionId\n          hasPermission\n          isActive\n        }\n      }\n    }\n  }\n": typeof types.GetUsersWithShelfPermissionsDocument,
    "\n  query FetchCompanyUsersWithAgendaPermissions(\n    $companyId: ID!\n    $agendaId: ID!\n    $agendaItemIds: [ID!]\n  ) {\n    fetchCompanyUsersWithAgendaPermissions(\n      companyId: $companyId\n      agendaId: $agendaId\n      agendaItemIds: $agendaItemIds\n    ) {\n      user {\n        id\n        firstName\n        lastName\n        email\n        roles {\n          role {\n            id\n            name\n            key\n          }\n        }\n        CompanyUserResourcePermission {\n          resourceId\n          resourceType\n          permissionId\n          hasPermission\n          isActive\n        }\n      }\n    }\n  }\n": typeof types.FetchCompanyUsersWithAgendaPermissionsDocument,
    "\n  mutation UpsertRestrictedAgendaResourcePermission(\n    $userId: String!\n    $companyId: String!\n    $resourcePermissions: [RestrictedResourcePermissionInput!]!\n  ) {\n    upsertRestrictedAgendaResourcePermission(\n      userId: $userId\n      companyId: $companyId\n      resourcePermissions: $resourcePermissions\n    ) {\n      message\n      success\n    }\n  }\n": typeof types.UpsertRestrictedAgendaResourcePermissionDocument,
    "\n  query GetStandardWordings($shelfId: ID) {\n    standardWordings(shelfId: $shelfId) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetStandardWordingsDocument,
    "\n  query GetStandardWording($id: ID!) {\n    standardWording(id: $id) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetStandardWordingDocument,
    "\n  mutation AddStandardWording($data: AddStandardWordingInput!) {\n    addStandardWording(data: $data) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n": typeof types.AddStandardWordingDocument,
    "\n  mutation UpdateStandardWording($data: UpdateStandardWordingInput!) {\n    updateStandardWording(data: $data) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n": typeof types.UpdateStandardWordingDocument,
    "\n  mutation DeleteStandardWording($id: ID!) {\n    deleteStandardWording(id: $id)\n  }\n": typeof types.DeleteStandardWordingDocument,
    "\n  query GetTermsOfReference($shelfId: ID!) {\n    termsOfReference(shelfId: $shelfId) {\n      id\n      shelfId\n      meetingDescription\n      quorumDecisionMakers\n      quorumTotalMembers\n      meetingFrequency\n      deliverables\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n      members {\n        id\n        user {\n          id\n          firstName\n        }\n        role\n        isDecisionMaker\n      }\n    }\n  }\n": typeof types.GetTermsOfReferenceDocument,
    "\n  mutation CreateTermsOfReference($data: TermsOfReferenceInput!) {\n    createTermsOfReference(data: $data)\n  }\n": typeof types.CreateTermsOfReferenceDocument,
};
const documents: Documents = {
    "\n  mutation UpdateAgendaConfiguration(\n    $bookshelfId: ID!\n    $configuration: UpdateAgendaConfigurationInput!\n  ) {\n    updateAgendaConfiguration(\n      bookshelfId: $bookshelfId\n      configuration: $configuration\n    ) {\n      id\n      showInvitees\n      showTitle\n      showDate\n      showTime\n      showLocation\n      showMeetingLink\n      showMeetingDetails\n      confidentialityFooter\n    }\n  }\n": types.UpdateAgendaConfigurationDocument,
    "\n  query UserActions($companyId: ID!, $userId: ID!) {\n    userActions(companyId: $companyId, userId: $userId) {\n      id\n      actionItem\n      dueDate\n      status\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      bookshelfId\n      agendaId\n      agendaMinuteId\n      update\n      createdAt\n      updatedAt\n      meetingName\n      bookshelfName\n      bookcaseName\n      actionRef\n    }\n  }\n": types.UserActionsDocument,
    "\n  query GetCarryOverActionItems($agendaId: ID!) {\n    getCarryOverActionItems(agendaId: $agendaId) {\n      id\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      agendaId\n      agendaMinuteId\n      createdAt\n      updatedAt\n      meetingName\n      bookshelfName\n      bookcaseName\n      actionRef\n    }\n  }\n": types.GetCarryOverActionItemsDocument,
    "\n  query GetGuestActionItem($actionItemId: ID!, $email: String!) {\n    getGuestActionItem(actionItemId: $actionItemId, email: $email) {\n      id\n      actionItem\n      status\n      dueDate\n      organization\n      bookcase\n      bookshelf\n      meeting\n      meetingDate\n      update {\n        date\n        content\n      }\n      assignee {\n        name\n        email\n      }\n      forwardedBy {\n        name\n        email\n        date\n      }\n    }\n  }\n": types.GetGuestActionItemDocument,
    "\n  query ActionItems($agendaMinuteId: ID!) {\n    actionItems(agendaMinuteId: $agendaMinuteId) {\n      id\n      agendaMinuteId\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      createdAt\n      updatedAt\n      actionRef\n      bookshelfName\n      bookcaseName\n    }\n  }\n": types.ActionItemsDocument,
    "\n  query GetActionLogsForBookshelf($bookshelfId: ID!) {\n    getActionLogsForBookshelf(bookshelfId: $bookshelfId) {\n      meetingId\n      meetingName\n      meetingDate\n      actionItems\n    }\n  }\n": types.GetActionLogsForBookshelfDocument,
    "\n  mutation AddCarryOverActionLog($bookshelfId: ID!, $agendaId: ID!) {\n    addCarryOverActionLog(bookshelfId: $bookshelfId, agendaId: $agendaId) {\n      success\n    }\n  }\n": types.AddCarryOverActionLogDocument,
    "\n  mutation UpsertActionItem($id: ID, $input: UpsertActionItemInput!) {\n    upsertActionItem(id: $id, input: $input) {\n      id\n      agendaMinuteId\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpsertActionItemDocument,
    "\n  mutation UpdateGuestActionItem(\n    $id: ID!\n    $input: UpdateGuestActionItemInput!\n  ) {\n    updateGuestActionItem(id: $id, input: $input)\n  }\n": types.UpdateGuestActionItemDocument,
    "\n  mutation DeleteActionItem($id: ID!) {\n    deleteActionItem(id: $id)\n  }\n": types.DeleteActionItemDocument,
    "\n  mutation ForwardActionItem($input: ForwardActionItemInput!) {\n    forwardActionItem(input: $input) {\n      success\n    }\n  }\n": types.ForwardActionItemDocument,
    "\n  mutation SendActionItems($input: SendActionItemsInput!) {\n    sendActionItems(input: $input) {\n      success\n      message\n      results {\n        total\n        sent\n        failed\n        errors\n      }\n    }\n  }\n": types.SendActionItemsDocument,
    "\n  query Agendas($query: String!, $companyId: String!, $take: Int) {\n    agendas(query: $query, companyId: $companyId, take: $take) {\n      id\n      createdAt\n      updatedAt\n      index\n      name\n      shortname\n      agendaMinute {\n        id\n        signatures {\n          signed\n          user {\n            firstName\n            lastName\n          }\n        }\n        minutesAmendments {\n          reviewer {\n            firstName\n            lastName\n          }\n          reviews {\n            id\n            status\n            comment\n            minutesAmendment {\n              reviewer {\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AgendasDocument,
    "\n  query AgendasWithPermissions(\n    $query: String!\n    $companyId: String!\n    $take: Int\n  ) {\n    agendasWithPermissions(query: $query, companyId: $companyId, take: $take) {\n      id\n      createdAt\n      updatedAt\n      index\n      meetingDate\n      startTime\n      location\n      name\n      shortname\n      logo\n      color\n      bookshelf {\n        id\n        name\n        bookcase {\n          id\n          name\n        }\n      }\n      agendaMinute {\n        id\n        minutes\n        signatures {\n          signed\n          user {\n            firstName\n            lastName\n          }\n          signatureUploadFile {\n            uploadedFileId\n            baseUrl\n            createdAt\n          }\n        }\n        minutesAmendments {\n          reviewer {\n            firstName\n            lastName\n          }\n          reviews {\n            id\n            status\n            comment\n            minutesAmendment {\n              reviewer {\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AgendasWithPermissionsDocument,
    "\n  query Agenda($agendaId: ID!) {\n    agenda(id: $agendaId) {\n      id\n      name\n      shortname\n      startTime\n      location\n      meetingDate\n      meetingLink\n      details\n      published\n      minutesTemplateVersion\n      index\n      color\n      logo\n      companyName\n      bookshelf {\n        id\n        name\n        showClientCompanyBranding\n        bookcase {\n          id\n          name\n        }\n      }\n      items {\n        id\n        name\n        owner\n        type\n        duration\n        parentAgendaItemId\n        index\n        files {\n          pageCount\n        }\n        childAgendaItems {\n          id\n          name\n          owner\n          type\n          duration\n          parentAgendaItemId\n          index\n          files {\n            pageCount\n          }\n          childAgendaItems {\n            id\n            name\n            owner\n            type\n            duration\n            parentAgendaItemId\n            index\n            files {\n              pageCount\n            }\n            childAgendaItems {\n              id\n              name\n              owner\n              type\n              duration\n              parentAgendaItemId\n              index\n              files {\n                pageCount\n              }\n              childAgendaItems {\n                id\n                name\n                owner\n                type\n                duration\n                parentAgendaItemId\n                index\n                files {\n                  pageCount\n                }\n              }\n            }\n          }\n        }\n      }\n      agendaPublishFile {\n        url\n      }\n      agendaMinute {\n        updatedAt\n        signatures {\n          signed\n        }\n        minutesAmendments {\n          id\n          reviewer {\n            firstName\n            lastName\n            id\n          }\n          reviews {\n            comment\n            id\n            status\n          }\n        }\n        minutesAmendmentNotes\n        minutes\n        previousMinutes\n        id\n        meetingLanguage\n        minutesLanguage\n      }\n      meetingMinuteTranscription {\n        transcription\n        id\n      }\n      highlights {\n        content\n        id\n        position\n        userId\n        comment\n        isPublic\n      }\n    }\n  }\n": types.AgendaDocument,
    "\n  query MinuteSignatures($agendaMinuteId: ID!) {\n    minuteSignatures(agendaMinuteId: $agendaMinuteId) {\n      signatoryId\n      signed\n      user {\n        firstName\n        lastName\n      }\n      signatureUploadFile {\n        uploadedFileId\n        baseUrl\n        createdAt\n      }\n    }\n  }\n": types.MinuteSignaturesDocument,
    "\n  query CompanyUsers($companyId: ID!) {\n    companyUsers(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      lastSignedIn\n      roles {\n        permissions {\n          name\n        }\n      }\n      companies {\n        accountStatus\n      }\n    }\n  }\n": types.CompanyUsersDocument,
    "\n  mutation DeleteMinutesAndTranscript($agendaId: ID!) {\n    deleteMinutesAndTranscript(agendaId: $agendaId)\n  }\n": types.DeleteMinutesAndTranscriptDocument,
    "\n  mutation AddReviewToMinutesAmendment(\n    $minutesAmendmentId: ID!\n    $comment: String!\n  ) {\n    addReviewToMinutesAmendment(\n      minutesAmendmentId: $minutesAmendmentId\n      comment: $comment\n    ) {\n      reviews {\n        comment\n      }\n    }\n  }\n": types.AddReviewToMinutesAmendmentDocument,
    "\n  mutation UpdateLastSignIn($companyId: ID!) {\n    updateLastSignIn(companyId: $companyId)\n  }\n": types.UpdateLastSignInDocument,
    "\n  mutation ResolveMinutesAmendment($minutesAmendmentReviewId: ID!) {\n    resolveMinutesAmendment(\n      minutesAmendmentReviewId: $minutesAmendmentReviewId\n    ) {\n      id\n      status\n    }\n  }\n": types.ResolveMinutesAmendmentDocument,
    "\n  mutation AddSignatureToMinutes(\n    $agendaMinuteId: ID!\n    $signatureFile: UploadFileInput!\n    $signedAt: DateTime\n  ) {\n    addSignatureToMinutes(\n      agendaMinuteId: $agendaMinuteId\n      signatureFile: $signatureFile\n      signedAt: $signedAt\n    ) {\n      message\n      signature {\n        url\n      }\n    }\n  }\n": types.AddSignatureToMinutesDocument,
    "\n  query GetCompanyUsers($companyId: ID!) {\n    companyUsers(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n": types.GetCompanyUsersDocument,
    "\n  query GetAuthorizedCompanyUsers(\n    $companyId: ID!\n    $query: String\n    $skip: Int\n    $take: Int\n  ) {\n    authorizedCompanyUsers(\n      companyId: $companyId\n      query: $query\n      skip: $skip\n      take: $take\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n": types.GetAuthorizedCompanyUsersDocument,
    "\n  query Me($companyId: ID) {\n    me(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      companies {\n        company {\n          id\n          name\n        }\n        provider\n        isActive\n        accountStatus\n      }\n      roles {\n        key\n        name\n      }\n    }\n  }\n": types.MeDocument,
    "\n  query CompanyUserResourcePermissions($userId: ID!, $companyId: ID!) {\n    companyUserResourcePermissions(userId: $userId, companyId: $companyId) {\n      resourceType\n      resourceId\n      includedPermissionIds\n    }\n  }\n": types.CompanyUserResourcePermissionsDocument,
    "\n  query AgendaMinuteByAgendaId($agendaId: ID!) {\n    agendaMinuteByAgendaId(agendaId: $agendaId) {\n      minutes\n      previousMinutes\n      id\n      meetingLanguage\n      minutesLanguage\n      updatedAt\n    }\n  }\n": types.AgendaMinuteByAgendaIdDocument,
    "\n  query AgendaAttendee($agendaId: ID!) {\n    agendaAttendee(agendaId: $agendaId) {\n      agendaId\n      attendeeId\n      createdByUserId\n      updatedAt\n      createdAt\n      updatedByUserId\n      status\n      user {\n        firstName\n        lastName\n        id\n        email\n      }\n    }\n  }\n": types.AgendaAttendeeDocument,
    "\n  query IsUserAttendee($agendaId: String!) {\n    isUserAttendee(agendaId: $agendaId) {\n      message\n      success\n    }\n  }\n": types.IsUserAttendeeDocument,
    "\n  query AgendaItemUploadedFiles($agendaItemId: ID!) {\n    agendaItemUploadedFiles(agendaItemId: $agendaItemId) {\n      id\n      name\n      extension\n      url\n    }\n  }\n": types.AgendaItemUploadedFilesDocument,
    "\n  query AgendaItemRequestedFiles($agendaItemId: ID!) {\n    agendaItemRequestedFiles(agendaItemId: $agendaItemId) {\n      agendaItemId\n      uploader {\n        firstName\n      }\n      uploadedFile {\n        name\n      }\n      uploadedFileId\n    }\n  }\n": types.AgendaItemRequestedFilesDocument,
    "\n  mutation UpdateAgenda($updateAgendaId: ID!, $data: UpdateAgendaInput!) {\n    updateAgenda(id: $updateAgendaId, data: $data) {\n      id\n      name\n      shortname\n      location\n      meetingDate\n      startTime\n      meetingLink\n      details\n      index\n      items {\n        id\n        name\n        owner\n        duration\n        type\n        agendaId\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateAgendaDocument,
    "\n  mutation AddHighlight(\n    $agendaId: ID!\n    $position: String!\n    $content: String!\n    $comment: String\n    $isPublic: Boolean\n  ) {\n    addHighlight(\n      agendaId: $agendaId\n      position: $position\n      content: $content\n      comment: $comment\n      isPublic: $isPublic\n    ) {\n      id\n      content\n      position\n      comment\n      userId\n      isPublic\n    }\n  }\n": types.AddHighlightDocument,
    "\n  mutation RemoveAllHighlights($agendaId: ID!) {\n    removeAllHighlights(agendaId: $agendaId) {\n      id\n    }\n  }\n": types.RemoveAllHighlightsDocument,
    "\n  mutation RemoveHighlight($removeHighlightId: ID!) {\n    removeHighlight(id: $removeHighlightId) {\n      id\n    }\n  }\n": types.RemoveHighlightDocument,
    "\n  mutation UpdateHighlight(\n    $updateHighlightId: ID!\n    $content: JSON\n    $position: JSON\n    $comment: JSON\n    $isPublic: Boolean\n  ) {\n    updateHighlight(\n      id: $updateHighlightId\n      content: $content\n      position: $position\n      comment: $comment\n      isPublic: $isPublic\n    ) {\n      id\n      isPublic\n    }\n  }\n": types.UpdateHighlightDocument,
    "\n  mutation UpdateHighlightVisibility($highlightId: ID!, $isPublic: Boolean!) {\n    updateHighlightVisibility(highlightId: $highlightId, isPublic: $isPublic) {\n      id\n      isPublic\n    }\n  }\n": types.UpdateHighlightVisibilityDocument,
    "\n  mutation DownloadMinutesAsWord($file: UploadFileInput!) {\n    downloadMinutesAsWord(file: $file)\n  }\n": types.DownloadMinutesAsWordDocument,
    "\n  mutation AddAgenda($bookshelfId: ID!, $data: AddAgendaInput!) {\n    addAgenda(bookshelfId: $bookshelfId, data: $data) {\n      id\n      name\n      shortname\n      startTime\n      location\n      meetingDate\n      meetingLink\n      details\n      published\n      index\n      bookshelf {\n        id\n        name\n        showClientCompanyBranding\n        bookcase {\n          id\n          name\n        }\n      }\n      items {\n        id\n        name\n        owner\n        type\n        duration\n        parentAgendaItemId\n        index\n        files {\n          pageCount\n        }\n        childAgendaItems {\n          id\n          name\n          owner\n          type\n          duration\n          parentAgendaItemId\n          index\n          files {\n            pageCount\n          }\n        }\n      }\n      agendaPublishFile {\n        url\n      }\n      agendaMinute {\n        signatures {\n          signed\n        }\n        minutesAmendments {\n          id\n          reviewer {\n            firstName\n            lastName\n            id\n          }\n          reviews {\n            comment\n            id\n            status\n          }\n        }\n        minutesAmendmentNotes\n        minutes\n        previousMinutes\n        id\n      }\n      meetingMinuteTranscription {\n        transcription\n        id\n      }\n    }\n  }\n": types.AddAgendaDocument,
    "\n  mutation DeactivateCompanyUser($companyId: ID!, $userId: ID!) {\n    deactivateCompanyUser(companyId: $companyId, userId: $userId)\n  }\n": types.DeactivateCompanyUserDocument,
    "\n  mutation PublishAgenda(\n    $companyId: ID!\n    $agendaId: String!\n    $attendeesId: [ID!]!\n    $guestIds: [ID!]\n    $sendNotification: Boolean!\n    $file: UploadFileInput!\n    $meetingDetails: AgendaEmailTemplateInput\n    $logoType: LogoType!\n    $noticeType: String!\n  ) {\n    publishAgenda(\n      companyId: $companyId\n      agendaId: $agendaId\n      attendeesId: $attendeesId\n      guestIds: $guestIds\n      sendNotification: $sendNotification\n      file: $file\n      meetingDetails: $meetingDetails\n      logoType: $logoType\n      noticeType: $noticeType\n    ) {\n      message\n    }\n  }\n": types.PublishAgendaDocument,
    "\n  mutation AddBookcase($companyId: ID!, $data: AddBookcaseInput!) {\n    addBookcase(companyId: $companyId, data: $data) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AddBookcaseDocument,
    "\n  mutation UpsertCompanyUserShelfPermission(\n    $resourceId: ID!\n    $companyId: ID!\n    $shelfPermissions: [ShelfPermissionInput!]\n  ) {\n    upsertCompanyUserShelfPermission(\n      resourceId: $resourceId\n      companyId: $companyId\n      shelfPermissions: $shelfPermissions\n    )\n  }\n": types.UpsertCompanyUserShelfPermissionDocument,
    "\n  mutation UpsertCompanyUserResourcePermission(\n    $userId: ID!\n    $companyId: ID!\n    $assignedRoles: [ID!]\n    $removedRoles: [ID!]\n    $resourcePermissions: [ResourcePermissionInput!]\n  ) {\n    upsertCompanyUserResourcePermission(\n      userId: $userId\n      assignedRoles: $assignedRoles\n      removedRoles: $removedRoles\n      companyId: $companyId\n      resourcePermissions: $resourcePermissions\n    )\n  }\n": types.UpsertCompanyUserResourcePermissionDocument,
    "\n  query AgendaItemsByAgendaId($agendaId: ID!) {\n    agendaItemsByAgendaId(agendaId: $agendaId) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      updatedAt\n    }\n  }\n": types.AgendaItemsByAgendaIdDocument,
    "\n  query Bookcases($companyId: ID!, $take: Int) {\n    bookcases(companyId: $companyId, take: $take) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        color\n        logo\n        showClientCompanyBranding\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n": types.BookcasesDocument,
    "\n  mutation DeleteBookcase($deleteBookcaseId: ID!) {\n    deleteBookcase(id: $deleteBookcaseId)\n  }\n": types.DeleteBookcaseDocument,
    "\n  mutation UpdateBookcase($updateBookcaseId: ID!, $name: String!) {\n    updateBookcase(id: $updateBookcaseId, name: $name) {\n      id\n      name\n      description\n    }\n  }\n": types.UpdateBookcaseDocument,
    "\n  mutation AddBookshelf($bookcaseId: ID!, $data: AddBookshelfInput!) {\n    addBookshelf(bookcaseId: $bookcaseId, data: $data) {\n      id\n      name\n      description\n      agendas {\n        id\n        createdAt\n        updatedAt\n        meetingDate\n        index\n        name\n        shortname\n        published\n        agendaMinute {\n          id\n          signatures {\n            signed\n          }\n        }\n      }\n    }\n  }\n": types.AddBookshelfDocument,
    "\n  mutation DeleteBookshelf($deleteBookshelfId: ID!) {\n    deleteBookshelf(id: $deleteBookshelfId)\n  }\n": types.DeleteBookshelfDocument,
    "\n  mutation RemoveBookshelfLogo($removeBookshelfLogoId: ID!) {\n    removeBookshelfLogo(id: $removeBookshelfLogoId) {\n      logo\n    }\n  }\n": types.RemoveBookshelfLogoDocument,
    "\n  mutation UpdateBookshelf(\n    $updateBookshelfId: ID!\n    $data: UpdateBookshelfInput!\n  ) {\n    updateBookshelf(id: $updateBookshelfId, data: $data) {\n      id\n      name\n      color\n      description\n    }\n  }\n": types.UpdateBookshelfDocument,
    "\n  mutation CreateOrUpdateAgendaMinute($data: CreateOrUpdateAgendaMinuteInput!) {\n    createOrUpdateAgendaMinute(data: $data) {\n      id\n      minutes\n      agendaId\n      createdByUserId\n      createdAt\n      updatedAt\n      updatedByUserId\n      staleData\n    }\n  }\n": types.CreateOrUpdateAgendaMinuteDocument,
    "\n  mutation UpdateOriginalMinutes($data: CreateOrUpdateAgendaMinuteInput!) {\n    updateOriginalMinutes(data: $data) {\n      id\n      minutes\n      agendaId\n      createdByUserId\n      createdAt\n      updatedAt\n      updatedByUserId\n    }\n  }\n": types.UpdateOriginalMinutesDocument,
    "\n  mutation GenerateMinutesFromCustomPrompt($agendaId: ID!, $prompt: String!) {\n    generateMinutesFromCustomPrompt(agendaId: $agendaId, prompt: $prompt)\n  }\n": types.GenerateMinutesFromCustomPromptDocument,
    "\n  mutation RequestSignatureForMinutes(\n    $agendaMinuteId: ID!\n    $signatories: [String!]!\n    $signatureRequestNotes: String\n    $sendNotification: Boolean!\n  ) {\n    requestSignatureForMinutes(\n      agendaMinuteId: $agendaMinuteId\n      signatories: $signatories\n      signatureRequestNotes: $signatureRequestNotes\n      sendNotification: $sendNotification\n    ) {\n      message\n    }\n  }\n": types.RequestSignatureForMinutesDocument,
    "\n  mutation AddReviewersToMinutes(\n    $agendaMinuteId: ID!\n    $minutesAmendmentNotes: String!\n    $reviewerIds: [ID!]!\n  ) {\n    addReviewersToMinutes(\n      data: {\n        agendaMinuteId: $agendaMinuteId\n        minutesAmendmentNotes: $minutesAmendmentNotes\n        reviewerIds: $reviewerIds\n      }\n    ) {\n      minutesAmendments {\n        reviewerId\n      }\n    }\n  }\n": types.AddReviewersToMinutesDocument,
    "\n  mutation AddUser(\n    $companyId: ID!\n    $user: AddUserInput!\n    $isSaveAndExit: Boolean\n  ) {\n    addUser(companyId: $companyId, user: $user, isSaveAndExit: $isSaveAndExit) {\n      id\n      lastSignedIn\n      email\n      firstName\n      lastName\n      telephone\n    }\n  }\n": types.AddUserDocument,
    "\n  mutation AddUsers($companyId: ID!, $users: [AddUserInput!]!) {\n    addUsers(companyId: $companyId, users: $users) {\n      createdUsers {\n        id\n        email\n        firstName\n        lastName\n        lastSignedIn\n        telephone\n      }\n    }\n  }\n": types.AddUsersDocument,
    "\n  mutation UpdateUser($companyId: ID!, $userId: ID!, $user: AddUserInput!) {\n    updateUser(companyId: $companyId, userId: $userId, user: $user) {\n      id\n      email\n      firstName\n      lastName\n      provider\n      telephone\n      lastSignedIn\n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation GenerateResetToken($email: String!) {\n    generateResetToken(email: $email)\n  }\n": types.GenerateResetTokenDocument,
    "\n  mutation ChangePassword(\n    $userId: ID!\n    $currentPassword: String!\n    $newPassword: String!\n  ) {\n    changePassword(\n      userId: $userId\n      currentPassword: $currentPassword\n      newPassword: $newPassword\n    )\n  }\n": types.ChangePasswordDocument,
    "\n  mutation CreateUserPassword(\n    $companyId: ID!\n    $resetToken: String!\n    $newPassword: String!\n  ) {\n    createUserPassword(\n      companyId: $companyId\n      resetToken: $resetToken\n      newPassword: $newPassword\n    )\n  }\n": types.CreateUserPasswordDocument,
    "\n  mutation ResetUserPassword($resetToken: String!, $newPassword: String!) {\n    resetUserPassword(resetToken: $resetToken, newPassword: $newPassword)\n  }\n": types.ResetUserPasswordDocument,
    "\n  mutation UploadAgendaItemFile(\n    $agendaItemId: ID!\n    $files: [UploadFileInput!]!\n  ) {\n    uploadAgendaItemFile(agendaItemId: $agendaItemId, files: $files) {\n      id\n      name\n      extension\n      url\n    }\n  }\n": types.UploadAgendaItemFileDocument,
    "\n  mutation UploadAgendaItemRequestedFile(\n    $agendaItemId: ID!\n    $agendaItemFileRequestId: ID!\n    $files: [UploadFileInput!]!\n  ) {\n    uploadAgendaItemRequestedFile(\n      agendaItemId: $agendaItemId\n      agendaItemFileRequestId: $agendaItemFileRequestId\n      files: $files\n    ) {\n      id\n      name\n      extension\n      url\n    }\n  }\n": types.UploadAgendaItemRequestedFileDocument,
    "\n  mutation RequestAgendaItemFile(\n    $companyId: ID!\n    $agendaItemId: ID!\n    $requesteeIds: [ID!]!\n    $deadline: DateTime\n    $message: String\n  ) {\n    requestAgendaItemFile(\n      companyId: $companyId\n      agendaItemId: $agendaItemId\n      requesteeIds: $requesteeIds\n      deadline: $deadline\n      message: $message\n    )\n  }\n": types.RequestAgendaItemFileDocument,
    "\n  mutation DeleteAgenda($agendaId: ID!, $companyId: ID!) {\n    deleteAgenda(agendaId: $agendaId, companyId: $companyId)\n  }\n": types.DeleteAgendaDocument,
    "\n  mutation ArchiveAgenda($agendaId: ID!) {\n    archiveAgenda(agendaId: $agendaId) {\n      id\n      name\n      shortname\n      location\n      meetingDate\n      startTime\n      meetingLink\n      details\n      index\n      createdAt\n      updatedAt\n      published\n      deleted\n    }\n  }\n": types.ArchiveAgendaDocument,
    "\n  mutation CloneAgenda($bookshelfId: ID!, $agendaId: ID!) {\n    cloneAgenda(bookshelfId: $bookshelfId, agendaId: $agendaId) {\n      id\n    }\n  }\n": types.CloneAgendaDocument,
    "\n  mutation ActivateCompanyUser($companyId: ID!, $userId: ID!) {\n    activateCompanyUser(companyId: $companyId, userId: $userId)\n  }\n": types.ActivateCompanyUserDocument,
    "\n  mutation DeleteAgendaItemFile($agendaItemId: ID!, $fileId: ID!) {\n    deleteAgendaItemFile(agendaItemId: $agendaItemId, fileId: $fileId)\n  }\n": types.DeleteAgendaItemFileDocument,
    "\n  mutation AddCompanyWithUser(\n    $companyId: ID!\n    $companyInput: AddCompanyInput!\n    $userInput: AddUserInput!\n  ) {\n    addCompanyWithUser(\n      companyId: $companyId\n      companyInput: $companyInput\n      userInput: $userInput\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n    }\n  }\n": types.AddCompanyWithUserDocument,
    "\n  query Companies {\n    companies {\n      id\n      name\n    }\n  }\n": types.CompaniesDocument,
    "\n  mutation ReInviteUser(\n    $email: String!\n    $companyId: ID!\n    $isSystemAdmin: Boolean\n  ) {\n    reInviteUser(\n      email: $email\n      companyId: $companyId\n      isSystemAdmin: $isSystemAdmin\n    )\n  }\n": types.ReInviteUserDocument,
    "\n  mutation DeleteCompanyUser($companyId: ID!, $userId: ID!) {\n    deleteCompanyUser(companyId: $companyId, userId: $userId)\n  }\n": types.DeleteCompanyUserDocument,
    "\n  query AuthorizedBookcasesByRole($companyId: ID!, $take: Int) {\n    authorizedBookcasesByRole(companyId: $companyId, take: $take) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AuthorizedBookcasesByRoleDocument,
    "\n  mutation AddMinutesTemplateVersion(\n    $agendaId: ID!\n    $templateVersion: MinutesTemplateVersion!\n  ) {\n    addMinutesTemplateVersion(\n      agendaId: $agendaId\n      templateVersion: $templateVersion\n    ) {\n      id\n      minutesTemplateVersion\n    }\n  }\n": types.AddMinutesTemplateVersionDocument,
    "\n  query GetAgendaConfiguration($bookshelfId: ID!) {\n    getAgendaConfiguration(bookshelfId: $bookshelfId) {\n      showInvitees\n      showTitle\n      showDate\n      showTime\n      showLocation\n      showMeetingLink\n      showMeetingDetails\n      confidentialityFooter\n    }\n  }\n": types.GetAgendaConfigurationDocument,
    "\n  mutation AddAgendaItemsToAgenda(\n    $agendaId: ID!\n    $data: [AddAgendaItemInput!]!\n  ) {\n    addAgendaItemsToAgenda(agendaId: $agendaId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n": types.AddAgendaItemsToAgendaDocument,
    "\n  mutation Mutation($agendaItemId: ID!, $data: AddAgendaItemInput!) {\n    addAgendaItemToAgendaItem(agendaItemId: $agendaItemId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n": types.MutationDocument,
    "\n  mutation UpdateAgendaItem(\n    $updateAgendaItemId: ID!\n    $data: UpdateAgendaItemInput!\n  ) {\n    updateAgendaItem(id: $updateAgendaItemId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateAgendaItemDocument,
    "\n  mutation DeleteAgendaItem($deleteAgendaItemId: ID!) {\n    deleteAgendaItem(id: $deleteAgendaItemId)\n  }\n": types.DeleteAgendaItemDocument,
    "\n  mutation DeleteTranscript($agendaId: ID!) {\n    deleteTranscript(agendaId: $agendaId)\n  }\n": types.DeleteTranscriptDocument,
    "\n  query GetAzureAdConfig($companyId: ID!) {\n    getAzureAdConfig(companyId: $companyId) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": types.GetAzureAdConfigDocument,
    "\n  mutation CreateAzureAdConfig($data: CreateAzureAdConfigInput!) {\n    createAzureAdConfig(data: $data) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": types.CreateAzureAdConfigDocument,
    "\n  mutation UpdateAzureAdConfig($data: UpdateAzureAdConfigInput!) {\n    updateAzureAdConfig(data: $data) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": types.UpdateAzureAdConfigDocument,
    "\n  mutation UpdateCompany($updateCompanyId: ID!, $data: UpdateCompanyInput!) {\n    updateCompany(id: $updateCompanyId, data: $data) {\n      id\n      logo\n      name\n      state\n      website\n      zip\n      address1\n      address2\n      city\n      color\n      updatedAt\n    }\n  }\n": types.UpdateCompanyDocument,
    "\n  query Company($companyId: ID!) {\n    company(id: $companyId) {\n      id\n      logo\n      name\n      state\n      website\n      zip\n      address1\n      address2\n      city\n      color\n      countryCode\n      updatedAt\n    }\n  }\n": types.CompanyDocument,
    "\n  mutation RemoveCompanyLogo($removeCompanyLogoId: ID!) {\n    removeCompanyLogo(id: $removeCompanyLogoId) {\n      logo\n    }\n  }\n": types.RemoveCompanyLogoDocument,
    "\n  query CompanyStatistics {\n    companyStatistics {\n      id\n      name\n      totalBookshelves\n      totalBookcases\n      totalAgendas\n      totalMinutes\n      lastLoginTime\n      lastLoginUser {\n        id\n        firstName\n        lastName\n        email\n      }\n      activeUsers\n    }\n  }\n": types.CompanyStatisticsDocument,
    "\n  mutation DeleteCompany($id: ID!) {\n    deleteCompany(id: $id)\n  }\n": types.DeleteCompanyDocument,
    "\n  mutation UpsertEmailNoticeTemplate($input: UpsertEmailNoticeTemplateInput!) {\n    upsertEmailNoticeTemplate(input: $input) {\n      id\n      subject\n      body\n      companyId\n      shelfId\n      type\n      variables\n      useShelfNotice\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpsertEmailNoticeTemplateDocument,
    "\n  query GetEmailNoticeTemplate(\n    $companyId: ID!\n    $type: TemplateType!\n    $shelfId: ID\n  ) {\n    getEmailNoticeTemplate(\n      companyId: $companyId\n      type: $type\n      shelfId: $shelfId\n    ) {\n      id\n      subject\n      body\n      companyId\n      shelfId\n      type\n      variables\n      useShelfNotice\n    }\n  }\n": types.GetEmailNoticeTemplateDocument,
    "\n  mutation SendPreviewEmail($input: SendPreviewEmailInput!) {\n    sendPreviewEmail(input: $input) {\n      success\n      message\n    }\n  }\n": types.SendPreviewEmailDocument,
    "\n  query Groups($companyId: ID!) {\n    groups(companyId: $companyId) {\n      id\n      name\n      description\n      type\n      isActive\n      isSuperGroup\n      companyId\n      creator {\n        id\n        firstName\n        lastName\n        email\n      }\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": types.GroupsDocument,
    "\n  query UserGroups($companyId: ID!) {\n    userGroups(companyId: $companyId) {\n      id\n      name\n    }\n  }\n": types.UserGroupsDocument,
    "\n  mutation CreateGroup(\n    $name: String!\n    $type: String!\n    $description: String!\n    $companyId: ID!\n    $managerIds: [ID!]!\n    $userIds: [ID!]!\n    $isSuperGroup: Boolean!\n    $autoAddCurrentUserAsAdmin: Boolean\n  ) {\n    createGroup(\n      input: {\n        name: $name\n        type: $type\n        description: $description\n        companyId: $companyId\n        managerIds: $managerIds\n        userIds: $userIds\n        isSuperGroup: $isSuperGroup\n        autoAddCurrentUserAsAdmin: $autoAddCurrentUserAsAdmin\n      }\n    ) {\n      id\n      name\n      type\n      description\n      isActive\n      isSuperGroup\n      companyId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": types.CreateGroupDocument,
    "\n  mutation UpdateGroup(\n    $id: ID!\n    $name: String!\n    $type: String!\n    $description: String!\n    $managerIds: [ID!]!\n    $userIds: [ID!]!\n    $isSuperGroup: Boolean!\n    $autoAddCurrentUserAsAdmin: Boolean\n  ) {\n    updateGroup(\n      id: $id\n      input: {\n        name: $name\n        type: $type\n        description: $description\n        managerIds: $managerIds\n        userIds: $userIds\n        isSuperGroup: $isSuperGroup\n        autoAddCurrentUserAsAdmin: $autoAddCurrentUserAsAdmin\n      }\n    ) {\n      id\n      name\n      type\n      description\n      isActive\n      isSuperGroup\n      companyId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": types.UpdateGroupDocument,
    "\n  mutation DeleteGroup($id: ID!) {\n    deleteGroup(id: $id) {\n      id\n    }\n  }\n": types.DeleteGroupDocument,
    "\n  mutation UpsertGroupResourcePermissions(\n    $groupId: ID!\n    $resourcePermissions: [ResourcePermissionInput!]!\n  ) {\n    upsertGroupResourcePermissions(\n      groupId: $groupId\n      resourcePermissions: $resourcePermissions\n    ) {\n      id\n      name\n      description\n      type\n      isActive\n      isSuperGroup\n      companyId\n      createdAt\n      createdByUserId\n      updatedAt\n      updatedByUserId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n": types.UpsertGroupResourcePermissionsDocument,
    "\n  query GroupResourcePermissions($groupId: ID!) {\n    groupResourcePermissions(groupId: $groupId) {\n      resourceId\n      resourceType\n    }\n  }\n": types.GroupResourcePermissionsDocument,
    "\n  query UsersInManagedGroups(\n    $companyId: ID!\n    $query: String\n    $skip: Int\n    $take: Int\n  ) {\n    usersInManagedGroups(\n      companyId: $companyId\n      query: $query\n      skip: $skip\n      take: $take\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n": types.UsersInManagedGroupsDocument,
    "\n  query GroupBookcases(\n    $companyId: ID!\n    $groupId: ID!\n    $search: String\n    $orderBy: [OrderByClause!]\n    $skip: Int\n    $take: Int\n  ) {\n    groupBookcases(\n      companyId: $companyId\n      groupId: $groupId\n      search: $search\n      orderBy: $orderBy\n      skip: $skip\n      take: $take\n    ) {\n      id\n      name\n      bookshelves {\n        id\n        name\n      }\n    }\n  }\n": types.GroupBookcasesDocument,
    "\n  query GetOktaConfig($companyId: ID!) {\n    getOktaConfig(companyId: $companyId) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n      createdAt\n      updatedAt\n      company {\n        name\n      }\n    }\n  }\n": types.GetOktaConfigDocument,
    "\n  mutation CreateOktaConfig($data: CreateOktaConfigInput!) {\n    createOktaConfig(data: $data) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n    }\n  }\n": types.CreateOktaConfigDocument,
    "\n  mutation UpdateOktaConfig($data: UpdateOktaConfigInput!) {\n    updateOktaConfig(data: $data) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n    }\n  }\n": types.UpdateOktaConfigDocument,
    "\n  mutation DeleteOktaConfig($companyId: ID!) {\n    deleteOktaConfig(companyId: $companyId)\n  }\n": types.DeleteOktaConfigDocument,
    "\n  query GetOktaOidcConfig($companyId: ID!) {\n    getOktaOidcConfig(companyId: $companyId) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": types.GetOktaOidcConfigDocument,
    "\n  mutation CreateOktaOidcConfig($data: CreateOktaOidcConfigInput!) {\n    createOktaOidcConfig(data: $data) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateOktaOidcConfigDocument,
    "\n  mutation UpdateOktaOidcConfig($data: UpdateOktaOidcConfigInput!) {\n    updateOktaOidcConfig(data: $data) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n": types.UpdateOktaOidcConfigDocument,
    "\n  mutation DeleteOktaOidcConfig($companyId: ID!) {\n    deleteOktaOidcConfig(companyId: $companyId)\n  }\n": types.DeleteOktaOidcConfigDocument,
    "\n  query Roles {\n    roles {\n      id\n      name\n      description\n      key\n    }\n  }\n": types.RolesDocument,
    "\n  query GetUsersWithShelfPermissions(\n    $companyId: ID!\n    $shelfId: ID!\n    $getAllUsers: Boolean\n  ) {\n    usersByCompany(\n      companyId: $companyId\n      shelfId: $shelfId\n      getAllUsers: $getAllUsers\n    ) {\n      user {\n        id\n        firstName\n        lastName\n        email\n        roles {\n          role {\n            id\n            name\n            key\n          }\n        }\n        CompanyUserResourcePermission {\n          permissionId\n          hasPermission\n          isActive\n        }\n      }\n    }\n  }\n": types.GetUsersWithShelfPermissionsDocument,
    "\n  query FetchCompanyUsersWithAgendaPermissions(\n    $companyId: ID!\n    $agendaId: ID!\n    $agendaItemIds: [ID!]\n  ) {\n    fetchCompanyUsersWithAgendaPermissions(\n      companyId: $companyId\n      agendaId: $agendaId\n      agendaItemIds: $agendaItemIds\n    ) {\n      user {\n        id\n        firstName\n        lastName\n        email\n        roles {\n          role {\n            id\n            name\n            key\n          }\n        }\n        CompanyUserResourcePermission {\n          resourceId\n          resourceType\n          permissionId\n          hasPermission\n          isActive\n        }\n      }\n    }\n  }\n": types.FetchCompanyUsersWithAgendaPermissionsDocument,
    "\n  mutation UpsertRestrictedAgendaResourcePermission(\n    $userId: String!\n    $companyId: String!\n    $resourcePermissions: [RestrictedResourcePermissionInput!]!\n  ) {\n    upsertRestrictedAgendaResourcePermission(\n      userId: $userId\n      companyId: $companyId\n      resourcePermissions: $resourcePermissions\n    ) {\n      message\n      success\n    }\n  }\n": types.UpsertRestrictedAgendaResourcePermissionDocument,
    "\n  query GetStandardWordings($shelfId: ID) {\n    standardWordings(shelfId: $shelfId) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n": types.GetStandardWordingsDocument,
    "\n  query GetStandardWording($id: ID!) {\n    standardWording(id: $id) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n": types.GetStandardWordingDocument,
    "\n  mutation AddStandardWording($data: AddStandardWordingInput!) {\n    addStandardWording(data: $data) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n": types.AddStandardWordingDocument,
    "\n  mutation UpdateStandardWording($data: UpdateStandardWordingInput!) {\n    updateStandardWording(data: $data) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n": types.UpdateStandardWordingDocument,
    "\n  mutation DeleteStandardWording($id: ID!) {\n    deleteStandardWording(id: $id)\n  }\n": types.DeleteStandardWordingDocument,
    "\n  query GetTermsOfReference($shelfId: ID!) {\n    termsOfReference(shelfId: $shelfId) {\n      id\n      shelfId\n      meetingDescription\n      quorumDecisionMakers\n      quorumTotalMembers\n      meetingFrequency\n      deliverables\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n      members {\n        id\n        user {\n          id\n          firstName\n        }\n        role\n        isDecisionMaker\n      }\n    }\n  }\n": types.GetTermsOfReferenceDocument,
    "\n  mutation CreateTermsOfReference($data: TermsOfReferenceInput!) {\n    createTermsOfReference(data: $data)\n  }\n": types.CreateTermsOfReferenceDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAgendaConfiguration(\n    $bookshelfId: ID!\n    $configuration: UpdateAgendaConfigurationInput!\n  ) {\n    updateAgendaConfiguration(\n      bookshelfId: $bookshelfId\n      configuration: $configuration\n    ) {\n      id\n      showInvitees\n      showTitle\n      showDate\n      showTime\n      showLocation\n      showMeetingLink\n      showMeetingDetails\n      confidentialityFooter\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAgendaConfiguration(\n    $bookshelfId: ID!\n    $configuration: UpdateAgendaConfigurationInput!\n  ) {\n    updateAgendaConfiguration(\n      bookshelfId: $bookshelfId\n      configuration: $configuration\n    ) {\n      id\n      showInvitees\n      showTitle\n      showDate\n      showTime\n      showLocation\n      showMeetingLink\n      showMeetingDetails\n      confidentialityFooter\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserActions($companyId: ID!, $userId: ID!) {\n    userActions(companyId: $companyId, userId: $userId) {\n      id\n      actionItem\n      dueDate\n      status\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      bookshelfId\n      agendaId\n      agendaMinuteId\n      update\n      createdAt\n      updatedAt\n      meetingName\n      bookshelfName\n      bookcaseName\n      actionRef\n    }\n  }\n"): (typeof documents)["\n  query UserActions($companyId: ID!, $userId: ID!) {\n    userActions(companyId: $companyId, userId: $userId) {\n      id\n      actionItem\n      dueDate\n      status\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      bookshelfId\n      agendaId\n      agendaMinuteId\n      update\n      createdAt\n      updatedAt\n      meetingName\n      bookshelfName\n      bookcaseName\n      actionRef\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCarryOverActionItems($agendaId: ID!) {\n    getCarryOverActionItems(agendaId: $agendaId) {\n      id\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      agendaId\n      agendaMinuteId\n      createdAt\n      updatedAt\n      meetingName\n      bookshelfName\n      bookcaseName\n      actionRef\n    }\n  }\n"): (typeof documents)["\n  query GetCarryOverActionItems($agendaId: ID!) {\n    getCarryOverActionItems(agendaId: $agendaId) {\n      id\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      agendaId\n      agendaMinuteId\n      createdAt\n      updatedAt\n      meetingName\n      bookshelfName\n      bookcaseName\n      actionRef\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetGuestActionItem($actionItemId: ID!, $email: String!) {\n    getGuestActionItem(actionItemId: $actionItemId, email: $email) {\n      id\n      actionItem\n      status\n      dueDate\n      organization\n      bookcase\n      bookshelf\n      meeting\n      meetingDate\n      update {\n        date\n        content\n      }\n      assignee {\n        name\n        email\n      }\n      forwardedBy {\n        name\n        email\n        date\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGuestActionItem($actionItemId: ID!, $email: String!) {\n    getGuestActionItem(actionItemId: $actionItemId, email: $email) {\n      id\n      actionItem\n      status\n      dueDate\n      organization\n      bookcase\n      bookshelf\n      meeting\n      meetingDate\n      update {\n        date\n        content\n      }\n      assignee {\n        name\n        email\n      }\n      forwardedBy {\n        name\n        email\n        date\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ActionItems($agendaMinuteId: ID!) {\n    actionItems(agendaMinuteId: $agendaMinuteId) {\n      id\n      agendaMinuteId\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      createdAt\n      updatedAt\n      actionRef\n      bookshelfName\n      bookcaseName\n    }\n  }\n"): (typeof documents)["\n  query ActionItems($agendaMinuteId: ID!) {\n    actionItems(agendaMinuteId: $agendaMinuteId) {\n      id\n      agendaMinuteId\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      createdAt\n      updatedAt\n      actionRef\n      bookshelfName\n      bookcaseName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActionLogsForBookshelf($bookshelfId: ID!) {\n    getActionLogsForBookshelf(bookshelfId: $bookshelfId) {\n      meetingId\n      meetingName\n      meetingDate\n      actionItems\n    }\n  }\n"): (typeof documents)["\n  query GetActionLogsForBookshelf($bookshelfId: ID!) {\n    getActionLogsForBookshelf(bookshelfId: $bookshelfId) {\n      meetingId\n      meetingName\n      meetingDate\n      actionItems\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCarryOverActionLog($bookshelfId: ID!, $agendaId: ID!) {\n    addCarryOverActionLog(bookshelfId: $bookshelfId, agendaId: $agendaId) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation AddCarryOverActionLog($bookshelfId: ID!, $agendaId: ID!) {\n    addCarryOverActionLog(bookshelfId: $bookshelfId, agendaId: $agendaId) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertActionItem($id: ID, $input: UpsertActionItemInput!) {\n    upsertActionItem(id: $id, input: $input) {\n      id\n      agendaMinuteId\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertActionItem($id: ID, $input: UpsertActionItemInput!) {\n    upsertActionItem(id: $id, input: $input) {\n      id\n      agendaMinuteId\n      actionItem\n      assignees {\n        id\n        firstName\n        lastName\n      }\n      externalAssignees {\n        name\n        email\n        assignedByUserId\n        updatedAt\n      }\n      dueDate\n      status\n      update\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateGuestActionItem(\n    $id: ID!\n    $input: UpdateGuestActionItemInput!\n  ) {\n    updateGuestActionItem(id: $id, input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateGuestActionItem(\n    $id: ID!\n    $input: UpdateGuestActionItemInput!\n  ) {\n    updateGuestActionItem(id: $id, input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteActionItem($id: ID!) {\n    deleteActionItem(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteActionItem($id: ID!) {\n    deleteActionItem(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ForwardActionItem($input: ForwardActionItemInput!) {\n    forwardActionItem(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation ForwardActionItem($input: ForwardActionItemInput!) {\n    forwardActionItem(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendActionItems($input: SendActionItemsInput!) {\n    sendActionItems(input: $input) {\n      success\n      message\n      results {\n        total\n        sent\n        failed\n        errors\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SendActionItems($input: SendActionItemsInput!) {\n    sendActionItems(input: $input) {\n      success\n      message\n      results {\n        total\n        sent\n        failed\n        errors\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Agendas($query: String!, $companyId: String!, $take: Int) {\n    agendas(query: $query, companyId: $companyId, take: $take) {\n      id\n      createdAt\n      updatedAt\n      index\n      name\n      shortname\n      agendaMinute {\n        id\n        signatures {\n          signed\n          user {\n            firstName\n            lastName\n          }\n        }\n        minutesAmendments {\n          reviewer {\n            firstName\n            lastName\n          }\n          reviews {\n            id\n            status\n            comment\n            minutesAmendment {\n              reviewer {\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Agendas($query: String!, $companyId: String!, $take: Int) {\n    agendas(query: $query, companyId: $companyId, take: $take) {\n      id\n      createdAt\n      updatedAt\n      index\n      name\n      shortname\n      agendaMinute {\n        id\n        signatures {\n          signed\n          user {\n            firstName\n            lastName\n          }\n        }\n        minutesAmendments {\n          reviewer {\n            firstName\n            lastName\n          }\n          reviews {\n            id\n            status\n            comment\n            minutesAmendment {\n              reviewer {\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AgendasWithPermissions(\n    $query: String!\n    $companyId: String!\n    $take: Int\n  ) {\n    agendasWithPermissions(query: $query, companyId: $companyId, take: $take) {\n      id\n      createdAt\n      updatedAt\n      index\n      meetingDate\n      startTime\n      location\n      name\n      shortname\n      logo\n      color\n      bookshelf {\n        id\n        name\n        bookcase {\n          id\n          name\n        }\n      }\n      agendaMinute {\n        id\n        minutes\n        signatures {\n          signed\n          user {\n            firstName\n            lastName\n          }\n          signatureUploadFile {\n            uploadedFileId\n            baseUrl\n            createdAt\n          }\n        }\n        minutesAmendments {\n          reviewer {\n            firstName\n            lastName\n          }\n          reviews {\n            id\n            status\n            comment\n            minutesAmendment {\n              reviewer {\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AgendasWithPermissions(\n    $query: String!\n    $companyId: String!\n    $take: Int\n  ) {\n    agendasWithPermissions(query: $query, companyId: $companyId, take: $take) {\n      id\n      createdAt\n      updatedAt\n      index\n      meetingDate\n      startTime\n      location\n      name\n      shortname\n      logo\n      color\n      bookshelf {\n        id\n        name\n        bookcase {\n          id\n          name\n        }\n      }\n      agendaMinute {\n        id\n        minutes\n        signatures {\n          signed\n          user {\n            firstName\n            lastName\n          }\n          signatureUploadFile {\n            uploadedFileId\n            baseUrl\n            createdAt\n          }\n        }\n        minutesAmendments {\n          reviewer {\n            firstName\n            lastName\n          }\n          reviews {\n            id\n            status\n            comment\n            minutesAmendment {\n              reviewer {\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Agenda($agendaId: ID!) {\n    agenda(id: $agendaId) {\n      id\n      name\n      shortname\n      startTime\n      location\n      meetingDate\n      meetingLink\n      details\n      published\n      minutesTemplateVersion\n      index\n      color\n      logo\n      companyName\n      bookshelf {\n        id\n        name\n        showClientCompanyBranding\n        bookcase {\n          id\n          name\n        }\n      }\n      items {\n        id\n        name\n        owner\n        type\n        duration\n        parentAgendaItemId\n        index\n        files {\n          pageCount\n        }\n        childAgendaItems {\n          id\n          name\n          owner\n          type\n          duration\n          parentAgendaItemId\n          index\n          files {\n            pageCount\n          }\n          childAgendaItems {\n            id\n            name\n            owner\n            type\n            duration\n            parentAgendaItemId\n            index\n            files {\n              pageCount\n            }\n            childAgendaItems {\n              id\n              name\n              owner\n              type\n              duration\n              parentAgendaItemId\n              index\n              files {\n                pageCount\n              }\n              childAgendaItems {\n                id\n                name\n                owner\n                type\n                duration\n                parentAgendaItemId\n                index\n                files {\n                  pageCount\n                }\n              }\n            }\n          }\n        }\n      }\n      agendaPublishFile {\n        url\n      }\n      agendaMinute {\n        updatedAt\n        signatures {\n          signed\n        }\n        minutesAmendments {\n          id\n          reviewer {\n            firstName\n            lastName\n            id\n          }\n          reviews {\n            comment\n            id\n            status\n          }\n        }\n        minutesAmendmentNotes\n        minutes\n        previousMinutes\n        id\n        meetingLanguage\n        minutesLanguage\n      }\n      meetingMinuteTranscription {\n        transcription\n        id\n      }\n      highlights {\n        content\n        id\n        position\n        userId\n        comment\n        isPublic\n      }\n    }\n  }\n"): (typeof documents)["\n  query Agenda($agendaId: ID!) {\n    agenda(id: $agendaId) {\n      id\n      name\n      shortname\n      startTime\n      location\n      meetingDate\n      meetingLink\n      details\n      published\n      minutesTemplateVersion\n      index\n      color\n      logo\n      companyName\n      bookshelf {\n        id\n        name\n        showClientCompanyBranding\n        bookcase {\n          id\n          name\n        }\n      }\n      items {\n        id\n        name\n        owner\n        type\n        duration\n        parentAgendaItemId\n        index\n        files {\n          pageCount\n        }\n        childAgendaItems {\n          id\n          name\n          owner\n          type\n          duration\n          parentAgendaItemId\n          index\n          files {\n            pageCount\n          }\n          childAgendaItems {\n            id\n            name\n            owner\n            type\n            duration\n            parentAgendaItemId\n            index\n            files {\n              pageCount\n            }\n            childAgendaItems {\n              id\n              name\n              owner\n              type\n              duration\n              parentAgendaItemId\n              index\n              files {\n                pageCount\n              }\n              childAgendaItems {\n                id\n                name\n                owner\n                type\n                duration\n                parentAgendaItemId\n                index\n                files {\n                  pageCount\n                }\n              }\n            }\n          }\n        }\n      }\n      agendaPublishFile {\n        url\n      }\n      agendaMinute {\n        updatedAt\n        signatures {\n          signed\n        }\n        minutesAmendments {\n          id\n          reviewer {\n            firstName\n            lastName\n            id\n          }\n          reviews {\n            comment\n            id\n            status\n          }\n        }\n        minutesAmendmentNotes\n        minutes\n        previousMinutes\n        id\n        meetingLanguage\n        minutesLanguage\n      }\n      meetingMinuteTranscription {\n        transcription\n        id\n      }\n      highlights {\n        content\n        id\n        position\n        userId\n        comment\n        isPublic\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MinuteSignatures($agendaMinuteId: ID!) {\n    minuteSignatures(agendaMinuteId: $agendaMinuteId) {\n      signatoryId\n      signed\n      user {\n        firstName\n        lastName\n      }\n      signatureUploadFile {\n        uploadedFileId\n        baseUrl\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query MinuteSignatures($agendaMinuteId: ID!) {\n    minuteSignatures(agendaMinuteId: $agendaMinuteId) {\n      signatoryId\n      signed\n      user {\n        firstName\n        lastName\n      }\n      signatureUploadFile {\n        uploadedFileId\n        baseUrl\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CompanyUsers($companyId: ID!) {\n    companyUsers(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      lastSignedIn\n      roles {\n        permissions {\n          name\n        }\n      }\n      companies {\n        accountStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query CompanyUsers($companyId: ID!) {\n    companyUsers(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      lastSignedIn\n      roles {\n        permissions {\n          name\n        }\n      }\n      companies {\n        accountStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteMinutesAndTranscript($agendaId: ID!) {\n    deleteMinutesAndTranscript(agendaId: $agendaId)\n  }\n"): (typeof documents)["\n  mutation DeleteMinutesAndTranscript($agendaId: ID!) {\n    deleteMinutesAndTranscript(agendaId: $agendaId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddReviewToMinutesAmendment(\n    $minutesAmendmentId: ID!\n    $comment: String!\n  ) {\n    addReviewToMinutesAmendment(\n      minutesAmendmentId: $minutesAmendmentId\n      comment: $comment\n    ) {\n      reviews {\n        comment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddReviewToMinutesAmendment(\n    $minutesAmendmentId: ID!\n    $comment: String!\n  ) {\n    addReviewToMinutesAmendment(\n      minutesAmendmentId: $minutesAmendmentId\n      comment: $comment\n    ) {\n      reviews {\n        comment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateLastSignIn($companyId: ID!) {\n    updateLastSignIn(companyId: $companyId)\n  }\n"): (typeof documents)["\n  mutation UpdateLastSignIn($companyId: ID!) {\n    updateLastSignIn(companyId: $companyId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResolveMinutesAmendment($minutesAmendmentReviewId: ID!) {\n    resolveMinutesAmendment(\n      minutesAmendmentReviewId: $minutesAmendmentReviewId\n    ) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation ResolveMinutesAmendment($minutesAmendmentReviewId: ID!) {\n    resolveMinutesAmendment(\n      minutesAmendmentReviewId: $minutesAmendmentReviewId\n    ) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddSignatureToMinutes(\n    $agendaMinuteId: ID!\n    $signatureFile: UploadFileInput!\n    $signedAt: DateTime\n  ) {\n    addSignatureToMinutes(\n      agendaMinuteId: $agendaMinuteId\n      signatureFile: $signatureFile\n      signedAt: $signedAt\n    ) {\n      message\n      signature {\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddSignatureToMinutes(\n    $agendaMinuteId: ID!\n    $signatureFile: UploadFileInput!\n    $signedAt: DateTime\n  ) {\n    addSignatureToMinutes(\n      agendaMinuteId: $agendaMinuteId\n      signatureFile: $signatureFile\n      signedAt: $signedAt\n    ) {\n      message\n      signature {\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCompanyUsers($companyId: ID!) {\n    companyUsers(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCompanyUsers($companyId: ID!) {\n    companyUsers(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAuthorizedCompanyUsers(\n    $companyId: ID!\n    $query: String\n    $skip: Int\n    $take: Int\n  ) {\n    authorizedCompanyUsers(\n      companyId: $companyId\n      query: $query\n      skip: $skip\n      take: $take\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAuthorizedCompanyUsers(\n    $companyId: ID!\n    $query: String\n    $skip: Int\n    $take: Int\n  ) {\n    authorizedCompanyUsers(\n      companyId: $companyId\n      query: $query\n      skip: $skip\n      take: $take\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me($companyId: ID) {\n    me(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      companies {\n        company {\n          id\n          name\n        }\n        provider\n        isActive\n        accountStatus\n      }\n      roles {\n        key\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query Me($companyId: ID) {\n    me(companyId: $companyId) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      companies {\n        company {\n          id\n          name\n        }\n        provider\n        isActive\n        accountStatus\n      }\n      roles {\n        key\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CompanyUserResourcePermissions($userId: ID!, $companyId: ID!) {\n    companyUserResourcePermissions(userId: $userId, companyId: $companyId) {\n      resourceType\n      resourceId\n      includedPermissionIds\n    }\n  }\n"): (typeof documents)["\n  query CompanyUserResourcePermissions($userId: ID!, $companyId: ID!) {\n    companyUserResourcePermissions(userId: $userId, companyId: $companyId) {\n      resourceType\n      resourceId\n      includedPermissionIds\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AgendaMinuteByAgendaId($agendaId: ID!) {\n    agendaMinuteByAgendaId(agendaId: $agendaId) {\n      minutes\n      previousMinutes\n      id\n      meetingLanguage\n      minutesLanguage\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query AgendaMinuteByAgendaId($agendaId: ID!) {\n    agendaMinuteByAgendaId(agendaId: $agendaId) {\n      minutes\n      previousMinutes\n      id\n      meetingLanguage\n      minutesLanguage\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AgendaAttendee($agendaId: ID!) {\n    agendaAttendee(agendaId: $agendaId) {\n      agendaId\n      attendeeId\n      createdByUserId\n      updatedAt\n      createdAt\n      updatedByUserId\n      status\n      user {\n        firstName\n        lastName\n        id\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query AgendaAttendee($agendaId: ID!) {\n    agendaAttendee(agendaId: $agendaId) {\n      agendaId\n      attendeeId\n      createdByUserId\n      updatedAt\n      createdAt\n      updatedByUserId\n      status\n      user {\n        firstName\n        lastName\n        id\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query IsUserAttendee($agendaId: String!) {\n    isUserAttendee(agendaId: $agendaId) {\n      message\n      success\n    }\n  }\n"): (typeof documents)["\n  query IsUserAttendee($agendaId: String!) {\n    isUserAttendee(agendaId: $agendaId) {\n      message\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AgendaItemUploadedFiles($agendaItemId: ID!) {\n    agendaItemUploadedFiles(agendaItemId: $agendaItemId) {\n      id\n      name\n      extension\n      url\n    }\n  }\n"): (typeof documents)["\n  query AgendaItemUploadedFiles($agendaItemId: ID!) {\n    agendaItemUploadedFiles(agendaItemId: $agendaItemId) {\n      id\n      name\n      extension\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AgendaItemRequestedFiles($agendaItemId: ID!) {\n    agendaItemRequestedFiles(agendaItemId: $agendaItemId) {\n      agendaItemId\n      uploader {\n        firstName\n      }\n      uploadedFile {\n        name\n      }\n      uploadedFileId\n    }\n  }\n"): (typeof documents)["\n  query AgendaItemRequestedFiles($agendaItemId: ID!) {\n    agendaItemRequestedFiles(agendaItemId: $agendaItemId) {\n      agendaItemId\n      uploader {\n        firstName\n      }\n      uploadedFile {\n        name\n      }\n      uploadedFileId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAgenda($updateAgendaId: ID!, $data: UpdateAgendaInput!) {\n    updateAgenda(id: $updateAgendaId, data: $data) {\n      id\n      name\n      shortname\n      location\n      meetingDate\n      startTime\n      meetingLink\n      details\n      index\n      items {\n        id\n        name\n        owner\n        duration\n        type\n        agendaId\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAgenda($updateAgendaId: ID!, $data: UpdateAgendaInput!) {\n    updateAgenda(id: $updateAgendaId, data: $data) {\n      id\n      name\n      shortname\n      location\n      meetingDate\n      startTime\n      meetingLink\n      details\n      index\n      items {\n        id\n        name\n        owner\n        duration\n        type\n        agendaId\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddHighlight(\n    $agendaId: ID!\n    $position: String!\n    $content: String!\n    $comment: String\n    $isPublic: Boolean\n  ) {\n    addHighlight(\n      agendaId: $agendaId\n      position: $position\n      content: $content\n      comment: $comment\n      isPublic: $isPublic\n    ) {\n      id\n      content\n      position\n      comment\n      userId\n      isPublic\n    }\n  }\n"): (typeof documents)["\n  mutation AddHighlight(\n    $agendaId: ID!\n    $position: String!\n    $content: String!\n    $comment: String\n    $isPublic: Boolean\n  ) {\n    addHighlight(\n      agendaId: $agendaId\n      position: $position\n      content: $content\n      comment: $comment\n      isPublic: $isPublic\n    ) {\n      id\n      content\n      position\n      comment\n      userId\n      isPublic\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveAllHighlights($agendaId: ID!) {\n    removeAllHighlights(agendaId: $agendaId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveAllHighlights($agendaId: ID!) {\n    removeAllHighlights(agendaId: $agendaId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveHighlight($removeHighlightId: ID!) {\n    removeHighlight(id: $removeHighlightId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveHighlight($removeHighlightId: ID!) {\n    removeHighlight(id: $removeHighlightId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateHighlight(\n    $updateHighlightId: ID!\n    $content: JSON\n    $position: JSON\n    $comment: JSON\n    $isPublic: Boolean\n  ) {\n    updateHighlight(\n      id: $updateHighlightId\n      content: $content\n      position: $position\n      comment: $comment\n      isPublic: $isPublic\n    ) {\n      id\n      isPublic\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateHighlight(\n    $updateHighlightId: ID!\n    $content: JSON\n    $position: JSON\n    $comment: JSON\n    $isPublic: Boolean\n  ) {\n    updateHighlight(\n      id: $updateHighlightId\n      content: $content\n      position: $position\n      comment: $comment\n      isPublic: $isPublic\n    ) {\n      id\n      isPublic\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateHighlightVisibility($highlightId: ID!, $isPublic: Boolean!) {\n    updateHighlightVisibility(highlightId: $highlightId, isPublic: $isPublic) {\n      id\n      isPublic\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateHighlightVisibility($highlightId: ID!, $isPublic: Boolean!) {\n    updateHighlightVisibility(highlightId: $highlightId, isPublic: $isPublic) {\n      id\n      isPublic\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DownloadMinutesAsWord($file: UploadFileInput!) {\n    downloadMinutesAsWord(file: $file)\n  }\n"): (typeof documents)["\n  mutation DownloadMinutesAsWord($file: UploadFileInput!) {\n    downloadMinutesAsWord(file: $file)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddAgenda($bookshelfId: ID!, $data: AddAgendaInput!) {\n    addAgenda(bookshelfId: $bookshelfId, data: $data) {\n      id\n      name\n      shortname\n      startTime\n      location\n      meetingDate\n      meetingLink\n      details\n      published\n      index\n      bookshelf {\n        id\n        name\n        showClientCompanyBranding\n        bookcase {\n          id\n          name\n        }\n      }\n      items {\n        id\n        name\n        owner\n        type\n        duration\n        parentAgendaItemId\n        index\n        files {\n          pageCount\n        }\n        childAgendaItems {\n          id\n          name\n          owner\n          type\n          duration\n          parentAgendaItemId\n          index\n          files {\n            pageCount\n          }\n        }\n      }\n      agendaPublishFile {\n        url\n      }\n      agendaMinute {\n        signatures {\n          signed\n        }\n        minutesAmendments {\n          id\n          reviewer {\n            firstName\n            lastName\n            id\n          }\n          reviews {\n            comment\n            id\n            status\n          }\n        }\n        minutesAmendmentNotes\n        minutes\n        previousMinutes\n        id\n      }\n      meetingMinuteTranscription {\n        transcription\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddAgenda($bookshelfId: ID!, $data: AddAgendaInput!) {\n    addAgenda(bookshelfId: $bookshelfId, data: $data) {\n      id\n      name\n      shortname\n      startTime\n      location\n      meetingDate\n      meetingLink\n      details\n      published\n      index\n      bookshelf {\n        id\n        name\n        showClientCompanyBranding\n        bookcase {\n          id\n          name\n        }\n      }\n      items {\n        id\n        name\n        owner\n        type\n        duration\n        parentAgendaItemId\n        index\n        files {\n          pageCount\n        }\n        childAgendaItems {\n          id\n          name\n          owner\n          type\n          duration\n          parentAgendaItemId\n          index\n          files {\n            pageCount\n          }\n        }\n      }\n      agendaPublishFile {\n        url\n      }\n      agendaMinute {\n        signatures {\n          signed\n        }\n        minutesAmendments {\n          id\n          reviewer {\n            firstName\n            lastName\n            id\n          }\n          reviews {\n            comment\n            id\n            status\n          }\n        }\n        minutesAmendmentNotes\n        minutes\n        previousMinutes\n        id\n      }\n      meetingMinuteTranscription {\n        transcription\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeactivateCompanyUser($companyId: ID!, $userId: ID!) {\n    deactivateCompanyUser(companyId: $companyId, userId: $userId)\n  }\n"): (typeof documents)["\n  mutation DeactivateCompanyUser($companyId: ID!, $userId: ID!) {\n    deactivateCompanyUser(companyId: $companyId, userId: $userId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PublishAgenda(\n    $companyId: ID!\n    $agendaId: String!\n    $attendeesId: [ID!]!\n    $guestIds: [ID!]\n    $sendNotification: Boolean!\n    $file: UploadFileInput!\n    $meetingDetails: AgendaEmailTemplateInput\n    $logoType: LogoType!\n    $noticeType: String!\n  ) {\n    publishAgenda(\n      companyId: $companyId\n      agendaId: $agendaId\n      attendeesId: $attendeesId\n      guestIds: $guestIds\n      sendNotification: $sendNotification\n      file: $file\n      meetingDetails: $meetingDetails\n      logoType: $logoType\n      noticeType: $noticeType\n    ) {\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation PublishAgenda(\n    $companyId: ID!\n    $agendaId: String!\n    $attendeesId: [ID!]!\n    $guestIds: [ID!]\n    $sendNotification: Boolean!\n    $file: UploadFileInput!\n    $meetingDetails: AgendaEmailTemplateInput\n    $logoType: LogoType!\n    $noticeType: String!\n  ) {\n    publishAgenda(\n      companyId: $companyId\n      agendaId: $agendaId\n      attendeesId: $attendeesId\n      guestIds: $guestIds\n      sendNotification: $sendNotification\n      file: $file\n      meetingDetails: $meetingDetails\n      logoType: $logoType\n      noticeType: $noticeType\n    ) {\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddBookcase($companyId: ID!, $data: AddBookcaseInput!) {\n    addBookcase(companyId: $companyId, data: $data) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddBookcase($companyId: ID!, $data: AddBookcaseInput!) {\n    addBookcase(companyId: $companyId, data: $data) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertCompanyUserShelfPermission(\n    $resourceId: ID!\n    $companyId: ID!\n    $shelfPermissions: [ShelfPermissionInput!]\n  ) {\n    upsertCompanyUserShelfPermission(\n      resourceId: $resourceId\n      companyId: $companyId\n      shelfPermissions: $shelfPermissions\n    )\n  }\n"): (typeof documents)["\n  mutation UpsertCompanyUserShelfPermission(\n    $resourceId: ID!\n    $companyId: ID!\n    $shelfPermissions: [ShelfPermissionInput!]\n  ) {\n    upsertCompanyUserShelfPermission(\n      resourceId: $resourceId\n      companyId: $companyId\n      shelfPermissions: $shelfPermissions\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertCompanyUserResourcePermission(\n    $userId: ID!\n    $companyId: ID!\n    $assignedRoles: [ID!]\n    $removedRoles: [ID!]\n    $resourcePermissions: [ResourcePermissionInput!]\n  ) {\n    upsertCompanyUserResourcePermission(\n      userId: $userId\n      assignedRoles: $assignedRoles\n      removedRoles: $removedRoles\n      companyId: $companyId\n      resourcePermissions: $resourcePermissions\n    )\n  }\n"): (typeof documents)["\n  mutation UpsertCompanyUserResourcePermission(\n    $userId: ID!\n    $companyId: ID!\n    $assignedRoles: [ID!]\n    $removedRoles: [ID!]\n    $resourcePermissions: [ResourcePermissionInput!]\n  ) {\n    upsertCompanyUserResourcePermission(\n      userId: $userId\n      assignedRoles: $assignedRoles\n      removedRoles: $removedRoles\n      companyId: $companyId\n      resourcePermissions: $resourcePermissions\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AgendaItemsByAgendaId($agendaId: ID!) {\n    agendaItemsByAgendaId(agendaId: $agendaId) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query AgendaItemsByAgendaId($agendaId: ID!) {\n    agendaItemsByAgendaId(agendaId: $agendaId) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Bookcases($companyId: ID!, $take: Int) {\n    bookcases(companyId: $companyId, take: $take) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        color\n        logo\n        showClientCompanyBranding\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Bookcases($companyId: ID!, $take: Int) {\n    bookcases(companyId: $companyId, take: $take) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        color\n        logo\n        showClientCompanyBranding\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteBookcase($deleteBookcaseId: ID!) {\n    deleteBookcase(id: $deleteBookcaseId)\n  }\n"): (typeof documents)["\n  mutation DeleteBookcase($deleteBookcaseId: ID!) {\n    deleteBookcase(id: $deleteBookcaseId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBookcase($updateBookcaseId: ID!, $name: String!) {\n    updateBookcase(id: $updateBookcaseId, name: $name) {\n      id\n      name\n      description\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBookcase($updateBookcaseId: ID!, $name: String!) {\n    updateBookcase(id: $updateBookcaseId, name: $name) {\n      id\n      name\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddBookshelf($bookcaseId: ID!, $data: AddBookshelfInput!) {\n    addBookshelf(bookcaseId: $bookcaseId, data: $data) {\n      id\n      name\n      description\n      agendas {\n        id\n        createdAt\n        updatedAt\n        meetingDate\n        index\n        name\n        shortname\n        published\n        agendaMinute {\n          id\n          signatures {\n            signed\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddBookshelf($bookcaseId: ID!, $data: AddBookshelfInput!) {\n    addBookshelf(bookcaseId: $bookcaseId, data: $data) {\n      id\n      name\n      description\n      agendas {\n        id\n        createdAt\n        updatedAt\n        meetingDate\n        index\n        name\n        shortname\n        published\n        agendaMinute {\n          id\n          signatures {\n            signed\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteBookshelf($deleteBookshelfId: ID!) {\n    deleteBookshelf(id: $deleteBookshelfId)\n  }\n"): (typeof documents)["\n  mutation DeleteBookshelf($deleteBookshelfId: ID!) {\n    deleteBookshelf(id: $deleteBookshelfId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveBookshelfLogo($removeBookshelfLogoId: ID!) {\n    removeBookshelfLogo(id: $removeBookshelfLogoId) {\n      logo\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveBookshelfLogo($removeBookshelfLogoId: ID!) {\n    removeBookshelfLogo(id: $removeBookshelfLogoId) {\n      logo\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBookshelf(\n    $updateBookshelfId: ID!\n    $data: UpdateBookshelfInput!\n  ) {\n    updateBookshelf(id: $updateBookshelfId, data: $data) {\n      id\n      name\n      color\n      description\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBookshelf(\n    $updateBookshelfId: ID!\n    $data: UpdateBookshelfInput!\n  ) {\n    updateBookshelf(id: $updateBookshelfId, data: $data) {\n      id\n      name\n      color\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOrUpdateAgendaMinute($data: CreateOrUpdateAgendaMinuteInput!) {\n    createOrUpdateAgendaMinute(data: $data) {\n      id\n      minutes\n      agendaId\n      createdByUserId\n      createdAt\n      updatedAt\n      updatedByUserId\n      staleData\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrUpdateAgendaMinute($data: CreateOrUpdateAgendaMinuteInput!) {\n    createOrUpdateAgendaMinute(data: $data) {\n      id\n      minutes\n      agendaId\n      createdByUserId\n      createdAt\n      updatedAt\n      updatedByUserId\n      staleData\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOriginalMinutes($data: CreateOrUpdateAgendaMinuteInput!) {\n    updateOriginalMinutes(data: $data) {\n      id\n      minutes\n      agendaId\n      createdByUserId\n      createdAt\n      updatedAt\n      updatedByUserId\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOriginalMinutes($data: CreateOrUpdateAgendaMinuteInput!) {\n    updateOriginalMinutes(data: $data) {\n      id\n      minutes\n      agendaId\n      createdByUserId\n      createdAt\n      updatedAt\n      updatedByUserId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateMinutesFromCustomPrompt($agendaId: ID!, $prompt: String!) {\n    generateMinutesFromCustomPrompt(agendaId: $agendaId, prompt: $prompt)\n  }\n"): (typeof documents)["\n  mutation GenerateMinutesFromCustomPrompt($agendaId: ID!, $prompt: String!) {\n    generateMinutesFromCustomPrompt(agendaId: $agendaId, prompt: $prompt)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RequestSignatureForMinutes(\n    $agendaMinuteId: ID!\n    $signatories: [String!]!\n    $signatureRequestNotes: String\n    $sendNotification: Boolean!\n  ) {\n    requestSignatureForMinutes(\n      agendaMinuteId: $agendaMinuteId\n      signatories: $signatories\n      signatureRequestNotes: $signatureRequestNotes\n      sendNotification: $sendNotification\n    ) {\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation RequestSignatureForMinutes(\n    $agendaMinuteId: ID!\n    $signatories: [String!]!\n    $signatureRequestNotes: String\n    $sendNotification: Boolean!\n  ) {\n    requestSignatureForMinutes(\n      agendaMinuteId: $agendaMinuteId\n      signatories: $signatories\n      signatureRequestNotes: $signatureRequestNotes\n      sendNotification: $sendNotification\n    ) {\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddReviewersToMinutes(\n    $agendaMinuteId: ID!\n    $minutesAmendmentNotes: String!\n    $reviewerIds: [ID!]!\n  ) {\n    addReviewersToMinutes(\n      data: {\n        agendaMinuteId: $agendaMinuteId\n        minutesAmendmentNotes: $minutesAmendmentNotes\n        reviewerIds: $reviewerIds\n      }\n    ) {\n      minutesAmendments {\n        reviewerId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddReviewersToMinutes(\n    $agendaMinuteId: ID!\n    $minutesAmendmentNotes: String!\n    $reviewerIds: [ID!]!\n  ) {\n    addReviewersToMinutes(\n      data: {\n        agendaMinuteId: $agendaMinuteId\n        minutesAmendmentNotes: $minutesAmendmentNotes\n        reviewerIds: $reviewerIds\n      }\n    ) {\n      minutesAmendments {\n        reviewerId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddUser(\n    $companyId: ID!\n    $user: AddUserInput!\n    $isSaveAndExit: Boolean\n  ) {\n    addUser(companyId: $companyId, user: $user, isSaveAndExit: $isSaveAndExit) {\n      id\n      lastSignedIn\n      email\n      firstName\n      lastName\n      telephone\n    }\n  }\n"): (typeof documents)["\n  mutation AddUser(\n    $companyId: ID!\n    $user: AddUserInput!\n    $isSaveAndExit: Boolean\n  ) {\n    addUser(companyId: $companyId, user: $user, isSaveAndExit: $isSaveAndExit) {\n      id\n      lastSignedIn\n      email\n      firstName\n      lastName\n      telephone\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddUsers($companyId: ID!, $users: [AddUserInput!]!) {\n    addUsers(companyId: $companyId, users: $users) {\n      createdUsers {\n        id\n        email\n        firstName\n        lastName\n        lastSignedIn\n        telephone\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddUsers($companyId: ID!, $users: [AddUserInput!]!) {\n    addUsers(companyId: $companyId, users: $users) {\n      createdUsers {\n        id\n        email\n        firstName\n        lastName\n        lastSignedIn\n        telephone\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($companyId: ID!, $userId: ID!, $user: AddUserInput!) {\n    updateUser(companyId: $companyId, userId: $userId, user: $user) {\n      id\n      email\n      firstName\n      lastName\n      provider\n      telephone\n      lastSignedIn\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($companyId: ID!, $userId: ID!, $user: AddUserInput!) {\n    updateUser(companyId: $companyId, userId: $userId, user: $user) {\n      id\n      email\n      firstName\n      lastName\n      provider\n      telephone\n      lastSignedIn\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateResetToken($email: String!) {\n    generateResetToken(email: $email)\n  }\n"): (typeof documents)["\n  mutation GenerateResetToken($email: String!) {\n    generateResetToken(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangePassword(\n    $userId: ID!\n    $currentPassword: String!\n    $newPassword: String!\n  ) {\n    changePassword(\n      userId: $userId\n      currentPassword: $currentPassword\n      newPassword: $newPassword\n    )\n  }\n"): (typeof documents)["\n  mutation ChangePassword(\n    $userId: ID!\n    $currentPassword: String!\n    $newPassword: String!\n  ) {\n    changePassword(\n      userId: $userId\n      currentPassword: $currentPassword\n      newPassword: $newPassword\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUserPassword(\n    $companyId: ID!\n    $resetToken: String!\n    $newPassword: String!\n  ) {\n    createUserPassword(\n      companyId: $companyId\n      resetToken: $resetToken\n      newPassword: $newPassword\n    )\n  }\n"): (typeof documents)["\n  mutation CreateUserPassword(\n    $companyId: ID!\n    $resetToken: String!\n    $newPassword: String!\n  ) {\n    createUserPassword(\n      companyId: $companyId\n      resetToken: $resetToken\n      newPassword: $newPassword\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResetUserPassword($resetToken: String!, $newPassword: String!) {\n    resetUserPassword(resetToken: $resetToken, newPassword: $newPassword)\n  }\n"): (typeof documents)["\n  mutation ResetUserPassword($resetToken: String!, $newPassword: String!) {\n    resetUserPassword(resetToken: $resetToken, newPassword: $newPassword)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadAgendaItemFile(\n    $agendaItemId: ID!\n    $files: [UploadFileInput!]!\n  ) {\n    uploadAgendaItemFile(agendaItemId: $agendaItemId, files: $files) {\n      id\n      name\n      extension\n      url\n    }\n  }\n"): (typeof documents)["\n  mutation UploadAgendaItemFile(\n    $agendaItemId: ID!\n    $files: [UploadFileInput!]!\n  ) {\n    uploadAgendaItemFile(agendaItemId: $agendaItemId, files: $files) {\n      id\n      name\n      extension\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadAgendaItemRequestedFile(\n    $agendaItemId: ID!\n    $agendaItemFileRequestId: ID!\n    $files: [UploadFileInput!]!\n  ) {\n    uploadAgendaItemRequestedFile(\n      agendaItemId: $agendaItemId\n      agendaItemFileRequestId: $agendaItemFileRequestId\n      files: $files\n    ) {\n      id\n      name\n      extension\n      url\n    }\n  }\n"): (typeof documents)["\n  mutation UploadAgendaItemRequestedFile(\n    $agendaItemId: ID!\n    $agendaItemFileRequestId: ID!\n    $files: [UploadFileInput!]!\n  ) {\n    uploadAgendaItemRequestedFile(\n      agendaItemId: $agendaItemId\n      agendaItemFileRequestId: $agendaItemFileRequestId\n      files: $files\n    ) {\n      id\n      name\n      extension\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RequestAgendaItemFile(\n    $companyId: ID!\n    $agendaItemId: ID!\n    $requesteeIds: [ID!]!\n    $deadline: DateTime\n    $message: String\n  ) {\n    requestAgendaItemFile(\n      companyId: $companyId\n      agendaItemId: $agendaItemId\n      requesteeIds: $requesteeIds\n      deadline: $deadline\n      message: $message\n    )\n  }\n"): (typeof documents)["\n  mutation RequestAgendaItemFile(\n    $companyId: ID!\n    $agendaItemId: ID!\n    $requesteeIds: [ID!]!\n    $deadline: DateTime\n    $message: String\n  ) {\n    requestAgendaItemFile(\n      companyId: $companyId\n      agendaItemId: $agendaItemId\n      requesteeIds: $requesteeIds\n      deadline: $deadline\n      message: $message\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAgenda($agendaId: ID!, $companyId: ID!) {\n    deleteAgenda(agendaId: $agendaId, companyId: $companyId)\n  }\n"): (typeof documents)["\n  mutation DeleteAgenda($agendaId: ID!, $companyId: ID!) {\n    deleteAgenda(agendaId: $agendaId, companyId: $companyId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ArchiveAgenda($agendaId: ID!) {\n    archiveAgenda(agendaId: $agendaId) {\n      id\n      name\n      shortname\n      location\n      meetingDate\n      startTime\n      meetingLink\n      details\n      index\n      createdAt\n      updatedAt\n      published\n      deleted\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveAgenda($agendaId: ID!) {\n    archiveAgenda(agendaId: $agendaId) {\n      id\n      name\n      shortname\n      location\n      meetingDate\n      startTime\n      meetingLink\n      details\n      index\n      createdAt\n      updatedAt\n      published\n      deleted\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloneAgenda($bookshelfId: ID!, $agendaId: ID!) {\n    cloneAgenda(bookshelfId: $bookshelfId, agendaId: $agendaId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CloneAgenda($bookshelfId: ID!, $agendaId: ID!) {\n    cloneAgenda(bookshelfId: $bookshelfId, agendaId: $agendaId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ActivateCompanyUser($companyId: ID!, $userId: ID!) {\n    activateCompanyUser(companyId: $companyId, userId: $userId)\n  }\n"): (typeof documents)["\n  mutation ActivateCompanyUser($companyId: ID!, $userId: ID!) {\n    activateCompanyUser(companyId: $companyId, userId: $userId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAgendaItemFile($agendaItemId: ID!, $fileId: ID!) {\n    deleteAgendaItemFile(agendaItemId: $agendaItemId, fileId: $fileId)\n  }\n"): (typeof documents)["\n  mutation DeleteAgendaItemFile($agendaItemId: ID!, $fileId: ID!) {\n    deleteAgendaItemFile(agendaItemId: $agendaItemId, fileId: $fileId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCompanyWithUser(\n    $companyId: ID!\n    $companyInput: AddCompanyInput!\n    $userInput: AddUserInput!\n  ) {\n    addCompanyWithUser(\n      companyId: $companyId\n      companyInput: $companyInput\n      userInput: $userInput\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n    }\n  }\n"): (typeof documents)["\n  mutation AddCompanyWithUser(\n    $companyId: ID!\n    $companyInput: AddCompanyInput!\n    $userInput: AddUserInput!\n  ) {\n    addCompanyWithUser(\n      companyId: $companyId\n      companyInput: $companyInput\n      userInput: $userInput\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Companies {\n    companies {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query Companies {\n    companies {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ReInviteUser(\n    $email: String!\n    $companyId: ID!\n    $isSystemAdmin: Boolean\n  ) {\n    reInviteUser(\n      email: $email\n      companyId: $companyId\n      isSystemAdmin: $isSystemAdmin\n    )\n  }\n"): (typeof documents)["\n  mutation ReInviteUser(\n    $email: String!\n    $companyId: ID!\n    $isSystemAdmin: Boolean\n  ) {\n    reInviteUser(\n      email: $email\n      companyId: $companyId\n      isSystemAdmin: $isSystemAdmin\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCompanyUser($companyId: ID!, $userId: ID!) {\n    deleteCompanyUser(companyId: $companyId, userId: $userId)\n  }\n"): (typeof documents)["\n  mutation DeleteCompanyUser($companyId: ID!, $userId: ID!) {\n    deleteCompanyUser(companyId: $companyId, userId: $userId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AuthorizedBookcasesByRole($companyId: ID!, $take: Int) {\n    authorizedBookcasesByRole(companyId: $companyId, take: $take) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AuthorizedBookcasesByRole($companyId: ID!, $take: Int) {\n    authorizedBookcasesByRole(companyId: $companyId, take: $take) {\n      id\n      name\n      description\n      bookshelves {\n        id\n        name\n        description\n        agendas {\n          id\n          createdAt\n          updatedAt\n          meetingDate\n          index\n          name\n          shortname\n          published\n          agendaMinute {\n            id\n            signatures {\n              signed\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddMinutesTemplateVersion(\n    $agendaId: ID!\n    $templateVersion: MinutesTemplateVersion!\n  ) {\n    addMinutesTemplateVersion(\n      agendaId: $agendaId\n      templateVersion: $templateVersion\n    ) {\n      id\n      minutesTemplateVersion\n    }\n  }\n"): (typeof documents)["\n  mutation AddMinutesTemplateVersion(\n    $agendaId: ID!\n    $templateVersion: MinutesTemplateVersion!\n  ) {\n    addMinutesTemplateVersion(\n      agendaId: $agendaId\n      templateVersion: $templateVersion\n    ) {\n      id\n      minutesTemplateVersion\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAgendaConfiguration($bookshelfId: ID!) {\n    getAgendaConfiguration(bookshelfId: $bookshelfId) {\n      showInvitees\n      showTitle\n      showDate\n      showTime\n      showLocation\n      showMeetingLink\n      showMeetingDetails\n      confidentialityFooter\n    }\n  }\n"): (typeof documents)["\n  query GetAgendaConfiguration($bookshelfId: ID!) {\n    getAgendaConfiguration(bookshelfId: $bookshelfId) {\n      showInvitees\n      showTitle\n      showDate\n      showTime\n      showLocation\n      showMeetingLink\n      showMeetingDetails\n      confidentialityFooter\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddAgendaItemsToAgenda(\n    $agendaId: ID!\n    $data: [AddAgendaItemInput!]!\n  ) {\n    addAgendaItemsToAgenda(agendaId: $agendaId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation AddAgendaItemsToAgenda(\n    $agendaId: ID!\n    $data: [AddAgendaItemInput!]!\n  ) {\n    addAgendaItemsToAgenda(agendaId: $agendaId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Mutation($agendaItemId: ID!, $data: AddAgendaItemInput!) {\n    addAgendaItemToAgendaItem(agendaItemId: $agendaItemId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation Mutation($agendaItemId: ID!, $data: AddAgendaItemInput!) {\n    addAgendaItemToAgendaItem(agendaItemId: $agendaItemId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAgendaItem(\n    $updateAgendaItemId: ID!\n    $data: UpdateAgendaItemInput!\n  ) {\n    updateAgendaItem(id: $updateAgendaItemId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAgendaItem(\n    $updateAgendaItemId: ID!\n    $data: UpdateAgendaItemInput!\n  ) {\n    updateAgendaItem(id: $updateAgendaItemId, data: $data) {\n      id\n      name\n      owner\n      duration\n      type\n      agendaId\n      parentAgendaItemId\n      index\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAgendaItem($deleteAgendaItemId: ID!) {\n    deleteAgendaItem(id: $deleteAgendaItemId)\n  }\n"): (typeof documents)["\n  mutation DeleteAgendaItem($deleteAgendaItemId: ID!) {\n    deleteAgendaItem(id: $deleteAgendaItemId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteTranscript($agendaId: ID!) {\n    deleteTranscript(agendaId: $agendaId)\n  }\n"): (typeof documents)["\n  mutation DeleteTranscript($agendaId: ID!) {\n    deleteTranscript(agendaId: $agendaId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAzureAdConfig($companyId: ID!) {\n    getAzureAdConfig(companyId: $companyId) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"): (typeof documents)["\n  query GetAzureAdConfig($companyId: ID!) {\n    getAzureAdConfig(companyId: $companyId) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateAzureAdConfig($data: CreateAzureAdConfigInput!) {\n    createAzureAdConfig(data: $data) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAzureAdConfig($data: CreateAzureAdConfigInput!) {\n    createAzureAdConfig(data: $data) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAzureAdConfig($data: UpdateAzureAdConfigInput!) {\n    updateAzureAdConfig(data: $data) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAzureAdConfig($data: UpdateAzureAdConfigInput!) {\n    updateAzureAdConfig(data: $data) {\n      id\n      companyId\n      tenantId\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCompany($updateCompanyId: ID!, $data: UpdateCompanyInput!) {\n    updateCompany(id: $updateCompanyId, data: $data) {\n      id\n      logo\n      name\n      state\n      website\n      zip\n      address1\n      address2\n      city\n      color\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCompany($updateCompanyId: ID!, $data: UpdateCompanyInput!) {\n    updateCompany(id: $updateCompanyId, data: $data) {\n      id\n      logo\n      name\n      state\n      website\n      zip\n      address1\n      address2\n      city\n      color\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Company($companyId: ID!) {\n    company(id: $companyId) {\n      id\n      logo\n      name\n      state\n      website\n      zip\n      address1\n      address2\n      city\n      color\n      countryCode\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query Company($companyId: ID!) {\n    company(id: $companyId) {\n      id\n      logo\n      name\n      state\n      website\n      zip\n      address1\n      address2\n      city\n      color\n      countryCode\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveCompanyLogo($removeCompanyLogoId: ID!) {\n    removeCompanyLogo(id: $removeCompanyLogoId) {\n      logo\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveCompanyLogo($removeCompanyLogoId: ID!) {\n    removeCompanyLogo(id: $removeCompanyLogoId) {\n      logo\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CompanyStatistics {\n    companyStatistics {\n      id\n      name\n      totalBookshelves\n      totalBookcases\n      totalAgendas\n      totalMinutes\n      lastLoginTime\n      lastLoginUser {\n        id\n        firstName\n        lastName\n        email\n      }\n      activeUsers\n    }\n  }\n"): (typeof documents)["\n  query CompanyStatistics {\n    companyStatistics {\n      id\n      name\n      totalBookshelves\n      totalBookcases\n      totalAgendas\n      totalMinutes\n      lastLoginTime\n      lastLoginUser {\n        id\n        firstName\n        lastName\n        email\n      }\n      activeUsers\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCompany($id: ID!) {\n    deleteCompany(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteCompany($id: ID!) {\n    deleteCompany(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertEmailNoticeTemplate($input: UpsertEmailNoticeTemplateInput!) {\n    upsertEmailNoticeTemplate(input: $input) {\n      id\n      subject\n      body\n      companyId\n      shelfId\n      type\n      variables\n      useShelfNotice\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertEmailNoticeTemplate($input: UpsertEmailNoticeTemplateInput!) {\n    upsertEmailNoticeTemplate(input: $input) {\n      id\n      subject\n      body\n      companyId\n      shelfId\n      type\n      variables\n      useShelfNotice\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEmailNoticeTemplate(\n    $companyId: ID!\n    $type: TemplateType!\n    $shelfId: ID\n  ) {\n    getEmailNoticeTemplate(\n      companyId: $companyId\n      type: $type\n      shelfId: $shelfId\n    ) {\n      id\n      subject\n      body\n      companyId\n      shelfId\n      type\n      variables\n      useShelfNotice\n    }\n  }\n"): (typeof documents)["\n  query GetEmailNoticeTemplate(\n    $companyId: ID!\n    $type: TemplateType!\n    $shelfId: ID\n  ) {\n    getEmailNoticeTemplate(\n      companyId: $companyId\n      type: $type\n      shelfId: $shelfId\n    ) {\n      id\n      subject\n      body\n      companyId\n      shelfId\n      type\n      variables\n      useShelfNotice\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendPreviewEmail($input: SendPreviewEmailInput!) {\n    sendPreviewEmail(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation SendPreviewEmail($input: SendPreviewEmailInput!) {\n    sendPreviewEmail(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Groups($companyId: ID!) {\n    groups(companyId: $companyId) {\n      id\n      name\n      description\n      type\n      isActive\n      isSuperGroup\n      companyId\n      creator {\n        id\n        firstName\n        lastName\n        email\n      }\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query Groups($companyId: ID!) {\n    groups(companyId: $companyId) {\n      id\n      name\n      description\n      type\n      isActive\n      isSuperGroup\n      companyId\n      creator {\n        id\n        firstName\n        lastName\n        email\n      }\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserGroups($companyId: ID!) {\n    userGroups(companyId: $companyId) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query UserGroups($companyId: ID!) {\n    userGroups(companyId: $companyId) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateGroup(\n    $name: String!\n    $type: String!\n    $description: String!\n    $companyId: ID!\n    $managerIds: [ID!]!\n    $userIds: [ID!]!\n    $isSuperGroup: Boolean!\n    $autoAddCurrentUserAsAdmin: Boolean\n  ) {\n    createGroup(\n      input: {\n        name: $name\n        type: $type\n        description: $description\n        companyId: $companyId\n        managerIds: $managerIds\n        userIds: $userIds\n        isSuperGroup: $isSuperGroup\n        autoAddCurrentUserAsAdmin: $autoAddCurrentUserAsAdmin\n      }\n    ) {\n      id\n      name\n      type\n      description\n      isActive\n      isSuperGroup\n      companyId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateGroup(\n    $name: String!\n    $type: String!\n    $description: String!\n    $companyId: ID!\n    $managerIds: [ID!]!\n    $userIds: [ID!]!\n    $isSuperGroup: Boolean!\n    $autoAddCurrentUserAsAdmin: Boolean\n  ) {\n    createGroup(\n      input: {\n        name: $name\n        type: $type\n        description: $description\n        companyId: $companyId\n        managerIds: $managerIds\n        userIds: $userIds\n        isSuperGroup: $isSuperGroup\n        autoAddCurrentUserAsAdmin: $autoAddCurrentUserAsAdmin\n      }\n    ) {\n      id\n      name\n      type\n      description\n      isActive\n      isSuperGroup\n      companyId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateGroup(\n    $id: ID!\n    $name: String!\n    $type: String!\n    $description: String!\n    $managerIds: [ID!]!\n    $userIds: [ID!]!\n    $isSuperGroup: Boolean!\n    $autoAddCurrentUserAsAdmin: Boolean\n  ) {\n    updateGroup(\n      id: $id\n      input: {\n        name: $name\n        type: $type\n        description: $description\n        managerIds: $managerIds\n        userIds: $userIds\n        isSuperGroup: $isSuperGroup\n        autoAddCurrentUserAsAdmin: $autoAddCurrentUserAsAdmin\n      }\n    ) {\n      id\n      name\n      type\n      description\n      isActive\n      isSuperGroup\n      companyId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateGroup(\n    $id: ID!\n    $name: String!\n    $type: String!\n    $description: String!\n    $managerIds: [ID!]!\n    $userIds: [ID!]!\n    $isSuperGroup: Boolean!\n    $autoAddCurrentUserAsAdmin: Boolean\n  ) {\n    updateGroup(\n      id: $id\n      input: {\n        name: $name\n        type: $type\n        description: $description\n        managerIds: $managerIds\n        userIds: $userIds\n        isSuperGroup: $isSuperGroup\n        autoAddCurrentUserAsAdmin: $autoAddCurrentUserAsAdmin\n      }\n    ) {\n      id\n      name\n      type\n      description\n      isActive\n      isSuperGroup\n      companyId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteGroup($id: ID!) {\n    deleteGroup(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteGroup($id: ID!) {\n    deleteGroup(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertGroupResourcePermissions(\n    $groupId: ID!\n    $resourcePermissions: [ResourcePermissionInput!]!\n  ) {\n    upsertGroupResourcePermissions(\n      groupId: $groupId\n      resourcePermissions: $resourcePermissions\n    ) {\n      id\n      name\n      description\n      type\n      isActive\n      isSuperGroup\n      companyId\n      createdAt\n      createdByUserId\n      updatedAt\n      updatedByUserId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertGroupResourcePermissions(\n    $groupId: ID!\n    $resourcePermissions: [ResourcePermissionInput!]!\n  ) {\n    upsertGroupResourcePermissions(\n      groupId: $groupId\n      resourcePermissions: $resourcePermissions\n    ) {\n      id\n      name\n      description\n      type\n      isActive\n      isSuperGroup\n      companyId\n      createdAt\n      createdByUserId\n      updatedAt\n      updatedByUserId\n      users {\n        id\n        firstName\n        lastName\n        email\n      }\n      managers {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GroupResourcePermissions($groupId: ID!) {\n    groupResourcePermissions(groupId: $groupId) {\n      resourceId\n      resourceType\n    }\n  }\n"): (typeof documents)["\n  query GroupResourcePermissions($groupId: ID!) {\n    groupResourcePermissions(groupId: $groupId) {\n      resourceId\n      resourceType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsersInManagedGroups(\n    $companyId: ID!\n    $query: String\n    $skip: Int\n    $take: Int\n  ) {\n    usersInManagedGroups(\n      companyId: $companyId\n      query: $query\n      skip: $skip\n      take: $take\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n"): (typeof documents)["\n  query UsersInManagedGroups(\n    $companyId: ID!\n    $query: String\n    $skip: Int\n    $take: Int\n  ) {\n    usersInManagedGroups(\n      companyId: $companyId\n      query: $query\n      skip: $skip\n      take: $take\n    ) {\n      id\n      email\n      firstName\n      lastName\n      telephone\n      roles {\n        key\n        name\n      }\n      companies {\n        companyId\n        accountStatus\n        lastSignedIn\n        provider\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GroupBookcases(\n    $companyId: ID!\n    $groupId: ID!\n    $search: String\n    $orderBy: [OrderByClause!]\n    $skip: Int\n    $take: Int\n  ) {\n    groupBookcases(\n      companyId: $companyId\n      groupId: $groupId\n      search: $search\n      orderBy: $orderBy\n      skip: $skip\n      take: $take\n    ) {\n      id\n      name\n      bookshelves {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GroupBookcases(\n    $companyId: ID!\n    $groupId: ID!\n    $search: String\n    $orderBy: [OrderByClause!]\n    $skip: Int\n    $take: Int\n  ) {\n    groupBookcases(\n      companyId: $companyId\n      groupId: $groupId\n      search: $search\n      orderBy: $orderBy\n      skip: $skip\n      take: $take\n    ) {\n      id\n      name\n      bookshelves {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOktaConfig($companyId: ID!) {\n    getOktaConfig(companyId: $companyId) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n      createdAt\n      updatedAt\n      company {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOktaConfig($companyId: ID!) {\n    getOktaConfig(companyId: $companyId) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n      createdAt\n      updatedAt\n      company {\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOktaConfig($data: CreateOktaConfigInput!) {\n    createOktaConfig(data: $data) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOktaConfig($data: CreateOktaConfigInput!) {\n    createOktaConfig(data: $data) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOktaConfig($data: UpdateOktaConfigInput!) {\n    updateOktaConfig(data: $data) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOktaConfig($data: UpdateOktaConfigInput!) {\n    updateOktaConfig(data: $data) {\n      id\n      companyId\n      organizationName\n      organizationDomain\n      oktaOrgUrl\n      oktaClientId\n      needsTokenUpdate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteOktaConfig($companyId: ID!) {\n    deleteOktaConfig(companyId: $companyId)\n  }\n"): (typeof documents)["\n  mutation DeleteOktaConfig($companyId: ID!) {\n    deleteOktaConfig(companyId: $companyId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOktaOidcConfig($companyId: ID!) {\n    getOktaOidcConfig(companyId: $companyId) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"): (typeof documents)["\n  query GetOktaOidcConfig($companyId: ID!) {\n    getOktaOidcConfig(companyId: $companyId) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOktaOidcConfig($data: CreateOktaOidcConfigInput!) {\n    createOktaOidcConfig(data: $data) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOktaOidcConfig($data: CreateOktaOidcConfigInput!) {\n    createOktaOidcConfig(data: $data) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOktaOidcConfig($data: UpdateOktaOidcConfigInput!) {\n    updateOktaOidcConfig(data: $data) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOktaOidcConfig($data: UpdateOktaOidcConfigInput!) {\n    updateOktaOidcConfig(data: $data) {\n      id\n      companyId\n      issuer\n      clientId\n      redirectUri\n      createdAt\n      updatedAt\n      needsSecretUpdate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteOktaOidcConfig($companyId: ID!) {\n    deleteOktaOidcConfig(companyId: $companyId)\n  }\n"): (typeof documents)["\n  mutation DeleteOktaOidcConfig($companyId: ID!) {\n    deleteOktaOidcConfig(companyId: $companyId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Roles {\n    roles {\n      id\n      name\n      description\n      key\n    }\n  }\n"): (typeof documents)["\n  query Roles {\n    roles {\n      id\n      name\n      description\n      key\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUsersWithShelfPermissions(\n    $companyId: ID!\n    $shelfId: ID!\n    $getAllUsers: Boolean\n  ) {\n    usersByCompany(\n      companyId: $companyId\n      shelfId: $shelfId\n      getAllUsers: $getAllUsers\n    ) {\n      user {\n        id\n        firstName\n        lastName\n        email\n        roles {\n          role {\n            id\n            name\n            key\n          }\n        }\n        CompanyUserResourcePermission {\n          permissionId\n          hasPermission\n          isActive\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUsersWithShelfPermissions(\n    $companyId: ID!\n    $shelfId: ID!\n    $getAllUsers: Boolean\n  ) {\n    usersByCompany(\n      companyId: $companyId\n      shelfId: $shelfId\n      getAllUsers: $getAllUsers\n    ) {\n      user {\n        id\n        firstName\n        lastName\n        email\n        roles {\n          role {\n            id\n            name\n            key\n          }\n        }\n        CompanyUserResourcePermission {\n          permissionId\n          hasPermission\n          isActive\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchCompanyUsersWithAgendaPermissions(\n    $companyId: ID!\n    $agendaId: ID!\n    $agendaItemIds: [ID!]\n  ) {\n    fetchCompanyUsersWithAgendaPermissions(\n      companyId: $companyId\n      agendaId: $agendaId\n      agendaItemIds: $agendaItemIds\n    ) {\n      user {\n        id\n        firstName\n        lastName\n        email\n        roles {\n          role {\n            id\n            name\n            key\n          }\n        }\n        CompanyUserResourcePermission {\n          resourceId\n          resourceType\n          permissionId\n          hasPermission\n          isActive\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchCompanyUsersWithAgendaPermissions(\n    $companyId: ID!\n    $agendaId: ID!\n    $agendaItemIds: [ID!]\n  ) {\n    fetchCompanyUsersWithAgendaPermissions(\n      companyId: $companyId\n      agendaId: $agendaId\n      agendaItemIds: $agendaItemIds\n    ) {\n      user {\n        id\n        firstName\n        lastName\n        email\n        roles {\n          role {\n            id\n            name\n            key\n          }\n        }\n        CompanyUserResourcePermission {\n          resourceId\n          resourceType\n          permissionId\n          hasPermission\n          isActive\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertRestrictedAgendaResourcePermission(\n    $userId: String!\n    $companyId: String!\n    $resourcePermissions: [RestrictedResourcePermissionInput!]!\n  ) {\n    upsertRestrictedAgendaResourcePermission(\n      userId: $userId\n      companyId: $companyId\n      resourcePermissions: $resourcePermissions\n    ) {\n      message\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertRestrictedAgendaResourcePermission(\n    $userId: String!\n    $companyId: String!\n    $resourcePermissions: [RestrictedResourcePermissionInput!]!\n  ) {\n    upsertRestrictedAgendaResourcePermission(\n      userId: $userId\n      companyId: $companyId\n      resourcePermissions: $resourcePermissions\n    ) {\n      message\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetStandardWordings($shelfId: ID) {\n    standardWordings(shelfId: $shelfId) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStandardWordings($shelfId: ID) {\n    standardWordings(shelfId: $shelfId) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetStandardWording($id: ID!) {\n    standardWording(id: $id) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStandardWording($id: ID!) {\n    standardWording(id: $id) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddStandardWording($data: AddStandardWordingInput!) {\n    addStandardWording(data: $data) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddStandardWording($data: AddStandardWordingInput!) {\n    addStandardWording(data: $data) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateStandardWording($data: UpdateStandardWordingInput!) {\n    updateStandardWording(data: $data) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStandardWording($data: UpdateStandardWordingInput!) {\n    updateStandardWording(data: $data) {\n      id\n      shelfId\n      agendaItemTitle\n      options {\n        condition\n        wording\n      }\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteStandardWording($id: ID!) {\n    deleteStandardWording(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteStandardWording($id: ID!) {\n    deleteStandardWording(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTermsOfReference($shelfId: ID!) {\n    termsOfReference(shelfId: $shelfId) {\n      id\n      shelfId\n      meetingDescription\n      quorumDecisionMakers\n      quorumTotalMembers\n      meetingFrequency\n      deliverables\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n      members {\n        id\n        user {\n          id\n          firstName\n        }\n        role\n        isDecisionMaker\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTermsOfReference($shelfId: ID!) {\n    termsOfReference(shelfId: $shelfId) {\n      id\n      shelfId\n      meetingDescription\n      quorumDecisionMakers\n      quorumTotalMembers\n      meetingFrequency\n      deliverables\n      createdAt\n      updatedAt\n      createdByUserId\n      updatedByUserId\n      deleted\n      shelf {\n        id\n        name\n      }\n      members {\n        id\n        user {\n          id\n          firstName\n        }\n        role\n        isDecisionMaker\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateTermsOfReference($data: TermsOfReferenceInput!) {\n    createTermsOfReference(data: $data)\n  }\n"): (typeof documents)["\n  mutation CreateTermsOfReference($data: TermsOfReferenceInput!) {\n    createTermsOfReference(data: $data)\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;